/*
    Copyright 2018 0kims association.

    This file is part of cusnarks.

    cusnarks is a free software: you can redistribute it and/or
    modify it under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your option)
    any later version.

    cusnarks is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
    more details.

    You should have received a copy of the GNU General Public License along with
    cusnarks. If not, see <https://www.gnu.org/licenses/>.
*/

// ------------------------------------------------------------------
// Author     : David Ruiz
//
// File name  : utiles_host.cpp
//
// Date       : 6/03/2019
//
// ------------------------------------------------------------------
//
// Description:
//   Util functions for host
//
// ------------------------------------------------------------------

// NOTE Signigicant parts of this code have been taken from :
//
// https://github.com/Xilinx/embeddedsw/blob/master/XilinxProcessorIPLib/drivers/hdcp22_rx/src/xhdcp22_rx_crypt.c
// https://github.com/Xilinx/embeddedsw/blob/master/XilinxProcessorIPLib/drivers/hdcp22_common/src/bigdigits.c

/******************************************************************************
*
* Copyright (C) 2015 - 2016 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/***** BEGIN LICENSE BLOCK *****
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2001-15 David Ireland, D.I. Management Services Pty Limited
 * <http://www.di-mgt.com.au/bigdigits.html>. All rights reserved.
 *
 ***** END LICENSE BLOCK *****/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "types.h"
#include "utils_host.h"


typedef unsigned long long uint64_t;

#define NDIGITS 8
#define MAX_NDIGITS_FIOS   ((NDIGITS) + 3)
#define MAX_NDIGITS_SOS   ((NDIGITS) * 2 + 2)
#define MAX_DIGIT 0xFFFFFFFFUL
#define NROOTS 128
#define MAX(X,Y)  ((X)>=(Y) ? (X) : (Y))

static uint32_t N[] = {
      3632069959, 1008765974, 1752287885, 2541841041, 2172737629, 3092268470, 3778125865,  811880050, // p_group
      4026531841, 1138881939, 2042196113,  674490440, 2172737629, 3092268470, 3778125865,  811880050  // p_field
};

static uint32_t NPrime[] = {
  3834012553, 2278688642,  516582089, 2665381221,  406051456, 3635399632, 2441645163, 4118422199, // pp_group
  4026531839, 3269588371, 1281954227, 1703315019, 2567316369, 3818559528,  226705842, 1945644829  // pp_field
};

static uint32_t _1[] = {
         3314486685, 3546104717, 4123462461,  175696680, 2021213740, 1718526831, 2584207151,  235567041,    // 1 group
         1342177275, 2895524892, 2673921321,  922515093, 2021213742, 1718526831, 2584207151,  235567041    // 1 field
};

uint32_t debug_rowidx;

#ifdef UTILS_DEBUG
#define MAX_ITER 1

static uint32_t p_root128[] = {
  3202964282, 1415263009, 1631761676, 2375868442,  876590776, 1603946946, 2412717293,  401158326  // 128
};

static uint32_t A_test[] = {
1256258315,  601837617, 1069080936, 2391979847, 2958730709, 3679080337, 1518004222,  102069457,
 2204987752, 1874568388, 2371460716,  888560196, 2292182714, 634522450, 2651832397,  402884448, 
1198955056, 4061702874, 3615318148, 4260396850, 3851409938, 3627029901, 1731075552,  342987479,
 3571653952, 1909926982,  624927312, 3888153648, 2330691360, 652225470,  332014540,  625825951,
 3623362368,  904470850, 1665520708, 1724109925, 3652838604, 2658063177, 4073632352,  763301965,
 2769688915, 2187634599, 2346386745, 1395322663, 2954855972, 1825006478, 2454589791,  319090038,
 2523359724,  887105995,  494154951, 3609987058, 1565290952, 1457137017, 1282283724,  491528928,
 2768580822, 1384751467, 3907661894,  383944499, 1441850550, 1546689270, 2783687656,  182915542,
  158974682, 3396244047, 2773924319,  778733917, 3030963087, 205389215, 3226972960,  154122791,
 3935268469, 3320960980, 3709852803, 2437479168,  320098100, 1521918273, 1741220040,  205545733,
 1263906699, 1046846550, 3721359378, 3210259149,  520982169, 2144308680, 2755620974,   11414059, 
  21764661,  868945262, 1731286133, 3029814492, 2503001426, 755033121,  912261344,    7129725,
 1616785766, 2195503044, 2852061529,  264916115, 1149002768, 417406747,  445239607,  722194642,
 2178830446, 4151763142,  198319755,  287401700, 2034030975, 2468919046, 2544973547,  363291349,
 3702506283, 2865590315, 1050049801, 3332197152, 3384775607, 3918263255, 1283982188,  588366481,
  517977885, 1029566787, 3940825686,   34119565, 1478843491, 1308539668,   78727563,  745366250,
 1591062903,  993229389,  580234699, 1287717131, 2747503763, 606038943, 4218119101,  623202580, 
 340897167, 2960888144, 3887775411, 1781407609,  855221996, 4006144342, 2655863382,  398333960,
  489174750, 3498526348,  323124800, 2793851541,  576353497, 3334271315, 2116986943,  483644805, 
2302605620, 3473655124,  585765183, 3054565972, 3887649068, 3829445954, 3177307850,  301022814 
};


static uint32_t B_test[] = {
 548181926, 1225716380,  468126608, 4005204904, 2388513804, 583156214,   67710866,  156399213,
 1207303151, 1337428745, 2837860042, 2137919382, 2650169497, 1813694756, 1567035542,   80699380, 
 683425751, 3181940019,  305963762, 2807067459, 1483915115, 3835576734, 2264682159,   81555530,
 1643964410, 1590354815, 1032742654, 4128194545, 2564665582, 4199839786, 3582326658,  145811360,
 3346895192,  181304503, 1049717776, 1468883430,  213835571, 3375977117,  282305921,  284087609,
 1383874757, 1423082634, 2326399730, 1541588762, 1428593542, 3163813778, 4194520436,  760955821,
 1134038619, 2935482759, 4031560088, 4167700353, 3668690894, 3267726428, 2849996811,  639049847,
 2181048745, 3599412776, 3843662363, 2185725879, 3640862564, 1714787130, 3701357704,  546928782,
  898093449, 3303938570, 4293233551,  165432267,  611916036, 2779265364,  447635832,   25751069,
 1068248709, 3800827826, 1140322355, 1935844249, 1531222554, 4095373989,  192499553,  428216688,
  104802797, 3515980973, 2957216437,  522886194, 4285184263, 900146818, 3208533331,  556170775,
  149711154, 2195572000, 1329817860, 3927646383, 1522155654, 983055118,  567446692,  471978486,
 3230743490,  135683751,  317496876, 1031321523, 2303570099, 4239634348, 1677239509,  215196812,
  674851924,  912829706, 3250197299, 2002899471, 4103127640, 2636444541, 2453671632,  799035391,
 3391231148, 2934050952, 1240681759, 1089599531,  410010485, 1275325891, 2778206240,  715219179,
 2180022583, 3036445361,  855786160, 1535927042, 2099386527, 795887328, 2306325173,  615770071,
  768819105, 3836440156,  644881714, 1744598840, 2587053905, 2506240773, 4068439331,  453836893,
 4238661489,  498742806, 3443155304, 4014726819, 4098793654, 3419675870, 3471477126,  539081725,
 1445158549, 2022858999,  870233025, 4191393186,  599097664, 1435096353, 2861125461,  147228404,
 1252434454,  939242963, 3648746914, 3104026600, 2040197232, 155258969, 3378915620,  330159036
};


static uint32_t C_test[] = {
3955451290,  253248363, 1482107006, 3314800280,  315086630, 3486692791, 3207618465,  126194561,
 1058671105,   22895396, 3818239006, 1305161960, 1949371996, 44047748, 2287552601,  364831290,
 1492815297, 4292406412, 2977499055, 2743225526,  183972794, 1182196296, 3776663476,  724713911,
  442393191, 4244605243,  160344748,  361123627, 2409671379, 1375738654,  106368128,  468457953,
 3614882474, 1654168634,  753621030, 1766841339, 4209845983, 3748482777, 3770809594,  610096687,
  486544338, 1698711925, 3838750103, 1554935791, 2093639809, 1316318253, 3214560316,  654521053,
 2144206135, 1298645589, 1817784937,  219983596, 1225488050, 2374425159, 2769477458,  676972072,
 2718042300, 2151749493,  321828716,   89762696, 1482222084, 2564244840, 3814485107,  763872767,
 3573260166,  970438300, 2999279511, 2320526534, 2798292936, 1401198405, 2398498329,  583521340,
 3579464556, 1774292118,  538821838, 2161464538, 1311598634, 3180195733, 2290516924,  675404498,
 3415644122, 1480210852, 2868976628, 1323841985, 2077848470, 1696729055, 1919994606,  776422423,
  692074605,  437237052, 4042185289,  328808453,   19611576, 3916913673, 2730801583,    9890690,
 1706996004, 1318603651, 1743225487, 4141394573, 2669419434, 3091130434,  540635505,  655583585,
 3796486424, 3652202371, 1305150008, 1148280713,  349551746, 7195923, 3290173732,  599571175,
 2294086398, 4187178280, 2253741305, 1993535815, 1584240876, 2178529509, 4294392488,  381161128,
 1611830361, 1910403235, 1587910330, 3825536545,  562071247, 352943092, 1669820090,  471561668,
 2803409641, 1252202815, 3131692192,  869397105, 1349534584, 3042585916, 2481578686,  230629477,
 4234344698,  440053358,  189044311, 3430533951,   81308567, 2531135150,  195371876,  628650400,
 3388651471, 1100330294,  145631195, 2138689275,  924409422, 3944115935, 1077566098,  162143137,
 3499692852, 1965759593, 4024683287,  596504335, 3872466899, 2411061029, 4063493423,  574933971
 };

static uint32_t C512_test[] = {
1297761826,  832103007, 3044933798, 4059550279,    8810213,
       2821329499, 1617699609, 4288878492, 1807374576, 1532734903,
       2843440460, 3124728977,  748035169, 1021623165, 1112610836,
          3716811, 1642453016, 2953123628, 1295291808, 4280354793, 3515263027,
       4199986205, 1307461609, 4229004268, 3537502196, 1077501329,
       3553944651,  329515415,  644237440,  407860636,  888464292,
          7569912, 4023209552,  658988968, 2994226670, 2673171661,  576047333,
       2458705425,  654069541, 4231370001, 2834430933, 3150393390,
       1368680051, 3333603787, 3913484088,  598740242,  848538739,
          6512861, 3761197184, 1435764650, 1987927098, 2406982902, 4056304547,
       2089478239,  351097708, 2417852107,  211805888, 1697974359,
       4027000417, 2756269828,  160120182, 3734249029,  543668826,
         21246386, 3376283136, 4269864575, 2388638705, 3385686744, 2173296963,
       4282075138,  682688054,  136983836, 2823247939,  888758213,
        292959840, 3956599735, 2630902902,  803391394, 3833442778,
         50488074, 1787444447, 3464653526, 2312992947, 1824060071, 2499721969,
       1253268408, 3287217180, 1631405329, 4175948296, 3472871976,
       3461299192, 2201638694, 1681195859, 4215751310, 2011908846,
         56534405, 3333263076,  836436779, 2738546147, 2529835736, 2491151058,
       1448668846,  575092506, 3086186943, 1478712394, 3429722001,
        652540987, 1326568399, 3997837606, 3076421430, 2746240099,
         73134779, 1899987782, 3101656506, 1321879241, 3848538688,  945220309,
       4246256551, 1625534668, 1415323350, 3531197160, 2633375707,
       1635943438,  633848562, 3623365272, 2261973692, 3824448439,
         23292790, 1563639978, 3933915161,  701615573,  325631130, 2632523889,
       1558879666, 3485397443, 2940266626, 1970741054,   78738744,
       1070110283, 1859060422,  886591136, 2515638172, 2001513588,
           924064, 2751031497, 1777354922, 3556916313, 2066849594, 2249910432,
        248176935, 3309803062, 4217234340, 3943320081, 3681708198,
       2638759896, 2937759957,  530627635, 3458086287, 4078916236,
         20493313, 3970287279, 2444717846, 2681819366, 2467257653, 2672691601,
       1819672694, 3948742551, 1262767700, 2001816824, 2559037839,
       2577455597, 1314344478,  922975177, 3164863821, 2878336906,
          1478047, 1215880026, 2064474270, 2333534035, 2246203799,  709900796,
       1182897963, 3304126999, 2385647314, 1095270686,  465396691,
        794780206, 1799934470, 3000756792, 1175049628,  100642755,
           783493,  931787084, 1249406199, 1047918462, 1138635402,   32685445,
       2643159482, 2942102156, 3105779350,  349306241, 3645687585,
       2201925395,  175036620,   70898312, 3957323435,  594969143,
         36185138, 2136919064, 2584518985,  527205280, 1377189266,  876328913,
       2195917420, 3715760394, 2888630589, 3193671110,  562388083,
       2893904475,  141690109,  779326084, 2941557588, 1106417120,
         67586695, 3675028708,  273230053, 2442902977,  182210821, 2436353445,
        665698106, 3394575488,   67961806,   13799894, 2706740646,
       2085641730, 4032820683, 2190424146, 4250412296,  618844502,
         97977694, 2777019451,  565887496, 2636560160, 4214196161, 3570392663,
        939327902, 1785591252, 2298370281, 1009900593, 2528095914,
        745826533, 4225939995,    6069923,  274491839,  776258627,
        106863265,1797645527, 3144914966, 2515151334, 1963877103, 3467043048,
       2756290665,   40804189, 3438232127, 2048254740, 1454585390,
         41846761, 3638181223, 2812880554, 2690073823, 4132655552,
         65852031, 2221716767, 3748259039,  394714880, 2884040822, 3811444522,
        112673667, 1697260034,  867795749, 3774368369, 3492072638,
       2936868221, 3770077319, 2597725510, 1868918218, 2458047553,
         49996785, 3504829238, 1385378145, 1740171937, 4276319642,  715568166,
       2097525848, 3788738488, 3956991250, 2562012038, 3786892496,
       3024054153, 2128576333, 3567079233, 3039482293, 3222311607,
         16578997, 1154765432, 3379876056, 3465772564, 3092128472,  490053016,
       1540279676, 2968339440, 2350663586, 1183958964, 3096560547,
       2039354533, 1771022169, 1322592420, 3264163194, 1069790544,
         23139967
};

static uint32_t AA_test[] = {
2775487097, 3155677456, 3814596564, 4217764216, 2707264952,
       3087220627, 1828705832, 1909384273,  707959124, 1668524151,
       1241040040, 2546430628, 1827951255, 1090511082,  803536958,
          2425670,  885848640, 2588678170, 4055980345,  430254779, 2687850538,
       1645947550,  941375975, 1120136843, 2399727300,  882420083,
       3707365836, 3007663060, 4147396371, 2199867170, 2440934296,
         37792110,  555600128, 4156119609,   48448582,  487155623, 3077767102,
       2047322431, 3716389079,  340565371, 3923156019, 2398805718,
       2622725316,  102827174, 3669903959, 2506565740, 2659365456,
         27390292, 3805777920, 3502960878, 1393150484, 1558208995, 3579170207,
       3452486324, 1805413271, 1452986671, 1956309772, 2301677334,
       3264306852, 3803635436, 2655326883,  457745086, 1779963495,
         91190012,  265326592, 1823560186, 1165936059, 1751628213, 1292757556,
       2073666385, 2307219485, 4044657867, 1367505264,  891282400,
       2437700257,  316146040, 4265130274, 3229547084, 2512218592,
        135654092, 1522880745, 3073168087, 2202408733, 3643063181, 2595377313,
       2866801155,  519648530, 2937192922, 3112339877, 3733317456,
       3921719788,  573496095,  807907230, 1960891907, 3786468052,
         23706455, 4156256656, 1028451886,  769826046,  627731145,  961651829,
        350534610,  387062257, 3058872693, 1715494063, 3466862515,
       1140631710, 1474005967, 1417389426,  454310080, 2336140240,
         56252043, 3450663652, 1093644274, 2031450803, 1236752748, 3697509689,
        538675710, 1929672849, 2948382659,   67458054, 1178126766,
        851800448, 3834655029, 3472646829, 4094263160, 4153675631,
          7790069,  442704292,  924365865,  917968677,  889850219, 2104053011,
        249377518, 1150200352, 3364071699, 1935479652, 2839901622,
       2674274784, 3506418507, 2051191231, 2720508641, 2910622839,
          5530620, 2053030265, 1246494226,  483645662, 2860307239, 4044309647,
       1668416735,  657282672, 2355154583,  333327978, 1666270908,
       2920618699, 3750192530, 1902215915, 2768416766,  691262218,
          9836873, 2091734393, 4183599853, 4202597142,  500851809, 2846948712,
       3235542513,  883418934, 1586428538, 2769579630, 1760834699,
       1877543429, 2631772274, 3788453680, 1036721401, 1514512274,
            30333, 4230401785, 2250217055, 4038818043,  686767903, 1508877980,
       2440054083, 3585016626, 3045813741,  602414064, 1282607836,
       2354283998,  879270456,  307793563, 1674919697, 2043656206,
            11835, 3497014436, 3732029412, 2724514150, 3703168062, 3893661847,
       4040993533, 1202156286, 1303149259, 1776158718,  314430262,
       2280285835, 2590442988, 1111384596, 4260156239,  827239343,
        121436338, 1947004740, 2616113222, 2511590604,  809915017, 1851075864,
       1857741471, 2278801452, 1980893677, 3194200394,   14669753,
       3377708559, 1525089137, 3445321662, 3260217162,  599209617,
         30729129, 1368688953, 1525530768, 3419865175, 3578262449,  318428538,
        691598374, 4122722933, 1533963528, 2208127137, 2587004729,
       2039741655,  629946644, 1616867161,  712591080,  639231350,
         80600175, 1400928585, 1084859801, 2009770245,  484188090, 2516141776,
       1819624493, 2750431906, 3390220473,  188446501,  121201042,
       3688681313, 3657592746,  213650080, 3555662511, 3541889476,
        129353917,  789300561, 1815989834,  138438513, 2131796921, 2055686501,
        507700149, 2131242089, 1833625054, 2181688482,  693078363,
       3914853114, 2359824133,  877484812, 3052310332, 2590769329,
         90427104, 2720568801, 2729399437, 4278492972,  668326062,  522310465,
       1936864894,  109593530, 3325195077, 1863633618, 2265339484,
       3533509886, 3954631876, 3114785547, 3675943824,  998144658,
         36943225, 2099406980, 2205388175, 2469330228,   55739438,  736990882,
        593182826, 2524727864, 4265173246, 3195711100, 1257434782,
       2984416515, 1801170959, 2509680744, 1262606682, 3753877325,
         54461950, 1338389136, 3370780759, 2423941416, 2030116592, 1257573108,
       2730387234,  466232774, 2989687544, 3552551956, 2342874499,
       2122111148, 3661904859, 1321034876, 1949689305,  314153127,
         21097887 
};

static uint32_t roots_128_test[] = {
1342177275, 2895524892, 2673921321,  922515093, 2021213742,
       1718526831, 2584207151,  235567041, 3202964282, 1415263009, 1631761676, 2375868442,  876590776,
       1603946946, 2412717293,  401158326, 3307600721, 3591168247, 1258116008, 1236052939, 2970516173,
       2051087460, 3757586544,  660000073,  882272309, 3605149691,  799601352,  345881325,  380470777,
       3769327136, 3791999381,  220850236, 2292284206, 1436927493, 1863072836, 2310988525, 3284102420,
       2592528728, 3605342721,  343835656, 1050848385, 2563631245, 3179812089, 2617552251, 4017929997,
       1073155728, 2270132725,  330390146,  909731689, 2759336937,  124570107,  317373940, 1225874207,
       1972139352, 2118921935,  778664142, 3739691983, 1636837275, 4101596855,  759165401, 3634574405,
       3852048048, 2562325020,  769202079, 2999093326, 2160059935, 3700525642, 2935736508,  729567453,
       2513295254,  980132873,  736003163, 4241635194,  239618703, 2481068534, 2335724012,  320578902,
        587053943, 3516121684,  648592675, 1852874306, 3042046382, 3720376782, 2610440467, 1115686158,
       1685280489, 4228380141,  164870150, 3318838052, 3296628154, 1874760594, 4122707795, 2278496674,
       1907182579, 3260173536,  644538102, 3962865036,  849939859,  659744097, 3665818920,  887683753,
       1314972491, 3574560323,  510354144, 2774833628,  976516381,  265124530, 4076941595, 1688978536,
       4110891001, 1441656347,  583717304, 1387607626, 3806698844, 1579592969, 3043122938, 2229597239,
       2430872088, 2010889832,  765887910, 1982061804, 2271847457, 3616981913, 2424513310, 1643422703,
       2373089730,  905737128,  603451758,  978486210, 1261742769, 4126010066, 4208140616,  602746469,
       3738781835, 2711012991,  203673995, 2770193716,  173522497, 3019730282, 2367490461,  629518941,
        982574109, 1393038830,  545732125,  192222780, 3585093360,  170860763, 1602962126,   39952628,
       4233295497,  223911376,  276430179, 3524132016, 2202629649, 1863736532, 4053675968, 2995381589,
        320445472,  235546349,  512687430, 3210169444,  571799473, 4147215858,  687416111, 2964157901,
       3849684136, 3692522755,  729938777, 3863607733, 1180564489, 2278938800, 3522846118,  874216436,
       2029983312, 1632893362,  524731510, 2286415888, 1812038162, 4236306296,  487467318, 2111863192,
       4058817927,  629528207,  497807265, 1360493032, 3263396333, 1487064781, 1918941173, 1379613469,
       2320260020,  606533682,   81711819, 1244482035,  330452492, 3296279002, 2808567544, 2940955937,
       1760199938, 2418605771,  629750890,  353396838, 2004943052, 1601455085, 1231636509,  375707298,
       1721835939,  116639544,  162465123, 2854377690,  999409413, 1415140125, 1140819283, 3002987030,
        105835952, 3777749774,  107464209, 3548453360, 2397377458, 1806402176, 2280557044, 3301715188,
       2141943243, 3631237932,  468658002, 4268758948,  417762385, 4236814568, 2248217265, 3374594792,
        687869391, 2931020772,  361527867, 1981762534, 1486853876, 1863504053,  896924022, 1994768263,
       4066454294,  936661034,   33517156, 2270163747, 1503052668, 1655735090, 1628116885, 1982367472,
       1687694952, 1425480701,  220431036, 1294969654, 1875832108, 1761160998, 4064398761, 4257556532,
       3126550475, 1487519883,  572928861, 2665279371, 2138389911, 2974257440, 1597970220, 1946774638,
       2377212537,  968952015,  725056309, 3592814461, 3602354598, 2987606358, 1344447180, 1135546519,
       1137785198, 2042457040,  222729420, 3436320399, 2847644786, 2661677365, 1338769578,  921830988,
        703969759, 1783589028,  549595461,  198393932, 3146934013, 3662411736, 4291806109, 3737446633,
       1213136458, 2178552045,  620700210, 2022146761, 2150658060, 2105772189, 2218376580, 1786403205,
        423080585, 3070285582,  301532851, 3380511824,  963129699, 3764777633, 2894142411, 2134864254,
         25566689, 2868817885,  803838771, 1930798164, 1988764697,  839027463, 2460027948, 3342778844,
       2749903995, 3649090762,  314823884, 2691603396, 3910841287, 2209479789, 4060906534, 2227271771,
       1448044445, 3335052953,  117306201, 1949273859, 4105600380, 1674602700, 1746611676,  469456746,
       2363866351, 3535158526,  377235793, 2783212148, 3784599489, 3663397418, 3561491738, 1274808634,
       2486652338, 3737870111,  763947293, 1309439785, 3570051670, 4063569813, 2038854360, 1577230223,
       3300207918, 3546828303,  795978461, 4012832280, 1870615739, 1876684703, 3881860335, 3023321076,
       3171730123, 3334873230,  248228850, 4024447053,  463933058, 2063891815,  575215092, 2272269203,
       3968666890,   95986586,    5636706,  227142820,   30490098, 3936939562, 3007749489, 3920437273,
       3410923589, 3368130186,  321304797, 3319435301, 2611668024,  827325320, 3331166446, 1809751670,
       3891071263,  345391876,  622410549, 1117106086, 2366217715, 2273137999, 1500387531, 1574053084,
       3002631940, 4104039176,  399400923, 3718422171,  839371741,  640663292, 2009740710, 2958679608,
       1031669727,  851251543,  313072991, 2552159070, 3376813856, 3955649544, 3693517818, 3827236065,
       3584342234,  475671236,  343828903, 3949888212, 2786202244,  651889650, 1099257467, 1207288422,
        250462783, 2268111247,  233183268, 1611305360, 2963978090, 3085152085, 2971884707,  398736645,
        226785340, 2798207879,  169408918, 2121233453, 4279475682, 4226397677, 1393044800, 1535131808,
       3429418656,   22039117,  646358045, 3965764479, 2342602520, 3297885858, 3091336151, 3890406972,
       1915521519,  487159291,  392451710, 3312810116, 2445334266, 3871294809, 2810348955, 3112695501,
       3285062893, 1834557287,  199870661, 1968124803, 1334974902, 1167987821, 4143923704, 2075100493,
        985198661,  886942876,  287694122,  115975281, 3281997936, 4285124589, 2634917807, 2727787619,
       1854498425, 2768436868,   69893076, 2699198770, 3261922992, 3431860108,  192120754, 3231789830,
       1197771094,  702979084,  664960398, 3382406017, 3391785293,  107192066,  996949588, 1126521727,
       3373803624, 2207262083,  539838925, 1919007797,  507461531, 2046532497,  160927670,  629566539,
       3200280815,  889961449,  538922514, 3512696636, 3662204595, 2047957525, 3694366805, 1895475809,
       3092782664, 3791196599,  365037694, 3928711885,  559573110, 1797278474, 1649169763,  722498935,
       1042515420, 3919641232,  309583161, 3165624537, 1373800165, 3020610148, 3456706025,  499242431,
       3117135124, 1326016958,  395568625,  432167758, 3064344779, 1884929873,  365414792, 1260057567,
        272808852, 2450956857,  361169232, 2684354566, 2538324343, 3663242087, 4046942642,  151523886,
       1373741639, 1193918714,  576313009,  823567559, 4018586226,  410434436, 2593589294, 1296146852,
       1488321524, 1365408572,  410721724,  718931120, 1842680988,  784080104, 3733404797, 3497188751,
       1041181009,   20539321,  151879977, 3144259532, 1828699544, 1242594760,  328609115, 1792266852,
       3617908630, 4281093779,  591029813, 1734247635, 3996921742,  179123276, 2658469211, 3183602504,
        499739741,  172783144,  468044394, 2975683456, 2870217990, 3157351319, 2351905484, 2449774927,
       2019112741, 1507993140,  481489904, 3116800152, 2674512298, 1917626005,  357116500,  946863422,
       1120129118, 1659203930,   33215908,  286839858, 3797011960, 2235566553, 4210292334, 2833130519,
       3535187717, 1215800844,   42677971, 1027438515, 3273789300, 2636637766, 2033721227, 1443170175,
        578973216, 2797992992,   75876887, 4079863943,  899263235, 3856094875, 2633733723, 1852158726,
       2505214527,  262004181,  163287375, 2173657535, 2391802853, 2616786626, 2359017268, 1057051470,
       1406987981, 3844713020,  647009899,  707693789, 2137221081,  167435518,  846749941, 4189208250,
       1185085890,  517952329,  167341948,   63666805,  288942080, 1382452016, 1303638816, 1285053875,
       1777295979,  203565542,  301525906, 1251698213,  162365558, 1777071583,  892516141,  483759092,
       3276344765, 2336469517,  228162746, 2638924215, 1627150391,  462603143, 1926334798, 4238107685,
        661396381, 1767236033,   45992140, 2044470037, 3162001778, 2720181495, 2544944425,  529314925,
        719178740, 2872388737,  208428292, 3048045631, 4172106466, 2211153342,  761317119, 1569991159,
       3648453931, 1067112873,  608206055, 1256338125,  965359442, 3317433127, 2601967274, 1543218687,
       2109694361, 2385087035,  266147925, 3834309061, 1848755875, 1871335349, 3366495610, 2132785000,
       3153940269, 3554214488,  535449871,  502399825, 3231219586,  178459580,  915781768, 3472323335,
       2771822997, 3542579516,  299192620,  816362397,  567082466, 2189947551, 4282041624, 3503547023,
       3537551629,   85603109,   81941273,  162924108, 4253284746, 4058224608, 1446611617, 1298521192,
       1062285158, 2145232503,  287148540, 1740115953, 3621811073, 2100857112,  187023121,   60874437,
       3328417839, 3148597657,  314072785, 2666038809, 2170452902,  555131331, 3050516563,  793124159,
        772008450, 3171592183,  730168231, 2782049806,  808429447, 3040884407, 2160890191, 3526748987,
       1332068531, 1359520094,  182129160, 3673135003, 3428906183,  440741027, 3737821227, 1797030330,
       1370432531, 3661486321,  649414927, 1172154151,  139472526,  627055988, 3828638453, 3464717894,
       2986432517,     376091,  704415841,  478078481, 3036471777,  235793936, 2688900692, 3165989736,
        950325226,  146887933,  343222048, 4052740189,  721119553, 2100348841, 2721240470, 3093110132,
       2404399078,  847105093,  450352183, 2044769307, 3946995359,  178692059, 4072533714,  177969365,
       3320781472, 2841464830,  778362894, 1756368094, 3930796567,  386461022, 3341340851,  190370156,
       1404573518, 2352645164,  591449014, 2731562187, 3558017127,  281035114,  905058975, 2210148392,
       4260685290, 2290605981,  238951189, 1361252470, 3295459324, 3362905968, 3371487515,  225962990,
        715055933, 2809173850,   86823741,  433717380, 1831494637, 3349557050, 3625010555, 1037191109,
       1954483272, 1735668825,  589150630,  590211442, 2586204449, 3675486043, 3630688157, 1250906640,
       2388298711, 1994536837,  262284589, 3828137909, 2286915222, 2674751672,  677651626, 2730258291,
       1879132011, 1599573820,  191179840, 2004385080, 3283191175, 4231391219, 2751081155,  386334423,
       2669187885,  707840283,  510347199,  646020017,  175752240, 2572385776, 2075315324,   37873374,
       3066701781,  909307980,    8041279, 2095733677, 3445084538, 1203168649, 2509429788, 3124926080,
        342364474,  129035103,  497056166, 1334928445, 1523007948, 4127683619,  908551201, 4240433153,
       1644224024,  443072912,  694573849, 2077257982, 1328248855,  367593412, 3222846060, 1703280882,
        728402119,  242967339,  434644257, 1243319693, 1649249746, 2673765990, 1407965997,  897928994,
        605616132,   40255754,   47932757, 2717092056, 1863797565, 2273593595, 2930603375,  595507405,
       4087027848,  231297561,   15901589,   13699561, 3563233496,  165511409, 1087597401, 3444383848,
       4215505642,  443252634,  563651200,    2084788,  674948881, 4273271594,   99275347, 4195435722,
       3418568875, 3682139278,  806243344, 3799389021, 1108391841, 2400223847, 1961708246, 2547267651,
       3976312176,  409995678,  490575253,  707096540, 2822181211, 1214870792, 1638291290,  362985958,
       3496164503, 3432733988,  189469501, 2909425755, 3067631520, 4064025409, 3469070204,  598684544,
         89636530, 3969053985,  412479126,  308109670,  299510198, 1401532821, 2959717026, 3509025316,
       2060598742, 2926874322,  498807059, 1474372771, 2057035379, 2381513864, 1275939917, 2640468859,
       3802893531, 3302454628,  468051147,   76643629, 2647646991, 1390306462, 3870200269,  965449206,
       2841805687, 1510014618,  578696782, 2415226481, 2469871145, 3252011323, 1997573028, 1774000983,
       2865483130,  979917986,  642471132, 1905298388, 1154373553, 2110765731, 3576412935,  637605820,
       3957817110, 3756086747,  165522005,   60767362, 3091246715, 3039277550, 1878121584, 2577297952,
       1176746950, 3290966574,  419428340,  713721725, 2988514969, 2465868599, 2159108780, 3355009423,
       4102172872, 1943568577,  612009389, 2058407038, 4098874333,  874208291,  825534032,   97637135,
       2107069809, 2891182989,  524185928, 3910556560, 2151851299, 2052038819, 2334539928, 3739917305,
       1237770044, 1009688997,  741986974, 1327333071, 2171926243, 2905303300,  482369685, 3235915095,
       1894497375, 3075146781,  146919652,  644125824, 2042063942, 1935004046, 3972508148, 1046215901,
       4013432142, 1570863781,  272041125, 2107524044,  631420408, 4290630912,  513562769, 1543171090,
       4186954951, 2888164415,  272957536,  513835205, 1771644640, 4289205883, 1275090930,  277261819,
       4294453102, 4281896561,  446842355,   97819956,  579308829,  244917639, 3320287973, 1450238693,
       2049753050, 4153451929,  502296888,  860907304, 4060049070, 3316553260, 1512751710, 1673495197,
       4270100642, 2452108906,  416311425, 3594364083, 2369504456,  157266239,  309075648,  912680062,
       2819459618, 1327169008,  450710818 
};


static uint32_t poly_fft_in_test[] = {
1256258315,  601837617, 1069080936, 2391979847, 2958730709,
        3679080337, 1518004222,  102069457,
       2204987752, 1874568388, 2371460716,  888560196, 2292182714,
         634522450, 2651832397,  402884448,
       1198955056, 4061702874, 3615318148, 4260396850, 3851409938,
        3627029901, 1731075552,  342987479,
       3571653952, 1909926982,  624927312, 3888153648, 2330691360,
         652225470,  332014540,  625825951,
       3623362368,  904470850, 1665520708, 1724109925, 3652838604,
        2658063177, 4073632352,  763301965,
       2769688915, 2187634599, 2346386745, 1395322663, 2954855972,
        1825006478, 2454589791,  319090038,
       2523359724,  887105995,  494154951, 3609987058, 1565290952,
        1457137017, 1282283724,  491528928,
       2768580822, 1384751467, 3907661894,  383944499, 1441850550,
        1546689270, 2783687656,  182915542,
        158974682, 3396244047, 2773924319,  778733917, 3030963087,
         205389215, 3226972960,  154122791,
       3935268469, 3320960980, 3709852803, 2437479168,  320098100,
        1521918273, 1741220040,  205545733,
       1263906699, 1046846550, 3721359378, 3210259149,  520982169,
        2144308680, 2755620974,   11414059,
         21764661,  868945262, 1731286133, 3029814492, 2503001426,
         755033121,  912261344,    7129725,
       1616785766, 2195503044, 2852061529,  264916115, 1149002768,
         417406747,  445239607,  722194642,
       2178830446, 4151763142,  198319755,  287401700, 2034030975,
        2468919046, 2544973547,  363291349,
       3702506283, 2865590315, 1050049801, 3332197152, 3384775607,
        3918263255, 1283982188,  588366481,
        517977885, 1029566787, 3940825686,   34119565, 1478843491,
        1308539668,   78727563,  745366250,
       1591062903,  993229389,  580234699, 1287717131, 2747503763,
         606038943, 4218119101,  623202580,
        340897167, 2960888144, 3887775411, 1781407609,  855221996,
        4006144342, 2655863382,  398333960,
        489174750, 3498526348,  323124800, 2793851541,  576353497,
        3334271315, 2116986943,  483644805,
       2302605620, 3473655124,  585765183, 3054565972, 3887649068,
        3829445954, 3177307850,  301022814,
        548181926, 1225716380,  468126608, 4005204904, 2388513804,
         583156214,   67710866,  156399213,
       1207303151, 1337428745, 2837860042, 2137919382, 2650169497,
        1813694756, 1567035542,   80699380,
        683425751, 3181940019,  305963762, 2807067459, 1483915115,
        3835576734, 2264682159,   81555530,
       1643964410, 1590354815, 1032742654, 4128194545, 2564665582,
        4199839786, 3582326658,  145811360,
       3346895192,  181304503, 1049717776, 1468883430,  213835571,
        3375977117,  282305921,  284087609,
       1383874757, 1423082634, 2326399730, 1541588762, 1428593542,
        3163813778, 4194520436,  760955821,
       1134038619, 2935482759, 4031560088, 4167700353, 3668690894,
        3267726428, 2849996811,  639049847,
       2181048745, 3599412776, 3843662363, 2185725879, 3640862564,
        1714787130, 3701357704,  546928782,
        898093449, 3303938570, 4293233551,  165432267,  611916036,
        2779265364,  447635832,   25751069,
       1068248709, 3800827826, 1140322355, 1935844249, 1531222554,
        4095373989,  192499553,  428216688,
        104802797, 3515980973, 2957216437,  522886194, 4285184263,
         900146818, 3208533331,  556170775,
        149711154, 2195572000, 1329817860, 3927646383, 1522155654,
         983055118,  567446692,  471978486,
       3230743490,  135683751,  317496876, 1031321523, 2303570099,
        4239634348, 1677239509,  215196812,
        674851924,  912829706, 3250197299, 2002899471, 4103127640,
        2636444541, 2453671632,  799035391,
       3391231148, 2934050952, 1240681759, 1089599531,  410010485,
        1275325891, 2778206240,  715219179,
       2180022583, 3036445361,  855786160, 1535927042, 2099386527,
         795887328, 2306325173,  615770071,
        768819105, 3836440156,  644881714, 1744598840, 2587053905,
        2506240773, 4068439331,  453836893,
       4238661489,  498742806, 3443155304, 4014726819, 4098793654,
        3419675870, 3471477126,  539081725,
       1445158549, 2022858999,  870233025, 4191393186,  599097664,
        1435096353, 2861125461,  147228404,
       1252434454,  939242963, 3648746914, 3104026600, 2040197232,
         155258969, 3378915620,  330159036,
       2728262154, 2237600751, 1375970798, 3130419020,  743971804,
        1099510425, 2937315951,  189017660,
        800279792, 1588687731, 2261797969, 3654182025,   56056444,
           7686774, 3580374880,  689071702,
       1186316953, 2456002054, 3597640279, 1084361417, 3345568704,
         795263646, 2003320720,   63179479,
       2117888151, 1533652002, 3530705978, 2951787509, 1795074264,
        4148415636, 3149170113,  459016072,
       2718166631, 4160222485, 2163786545,  854266981, 1293047795,
         398576572, 1185833599,  731291277,
       3855823785, 1517734775, 4134491370,  491849573, 2974463571,
         266222275, 3556210515,  328389839,
       4195969684, 4044429753,  669304279,  638441014,  596968246,
        3765004278, 3601838397,  485466688,
       3145630148, 3124570745, 3984651833, 4176720202, 3366713236,
         493177125, 1780406619,    9851135,
        315135461, 1676245263, 1274793923,   63798873, 2655800676,
         511882392, 1996180030,  662926787,
       3447116811, 1541131749, 2405019773, 2204465025,  475681278,
           5424974, 2524540643,  616532383,
       3258290461, 1954698362, 1970178012, 1126549664, 1175450972,
         240331637,  696203486,  594844262,
       2945413152, 2563538086, 1742496891, 2447063756, 4158530685,
        3869765358,  381843583,  735415803,
       3233920589, 3859789220, 4127246911, 2122098372, 1576368079,
        2917620627, 1699599489,   44763057,
       1589025298, 1341453089, 4040311063, 2610446863,   24332944,
         662425780, 3161283823,  644289729,
       1958490107, 3964077065, 1548943559, 2963953689, 2794257173,
        4142020268, 1023498041,  631833304,
       3433992249,  415401916, 3951982402, 4109432031, 1559021734,
         947843834, 2826638013,  319761727,
       1681676393,  235592344, 1569371193, 2099452347, 1888725815,
        1293038731, 2414949779,  709066369,
        719703094, 3766106594,  263108934, 4070998577, 3827944253,
        1687485202, 2631466599,   84531982,
       2392987024, 3428192250,  480511012, 1202261467, 2641417573,
         636701535, 2452221178,  210097303,
       1935855145, 3213327284, 3538849441, 2601338991,  127069523,
        3125494308,  599408635,  517493579,
       4168206401,  250033029,  127324997, 2430420965, 1469284680,
        3695230051, 4256182747,  661004371,
        540383698, 3123115988,  536056678, 3600041858, 2620005642,
        2778573571,  674299678,   57893414,
        586983457, 4254069721,  557091996, 1570950088, 2742785525,
        2540828623, 2081441944,  208890622,
       1789879324,  226834630, 1462675269, 2739244869, 1993676943,
         555343013,  509915364,  455911687,
       1821303398,  476377461,  389381462, 3935828487, 3793638208,
        2037746231, 3578955230,  638303046,
         93941700, 1883116282, 4067107430, 2339029672, 3749212656,
          45030630,  438429061,  347150420,
       1990042081, 4082788357, 1034682750,  441802585, 1290996572,
        2195424334,  372777915,  253627645,
       3819154354, 3250653647, 4001495740, 2082126818, 2025229858,
         969172225, 2882311916,  119727590,
       3493461104, 1438797684, 3404591744,  244136094, 1034580162,
        4003859470,  719182241,  223106453,
       1562963330,  939734549, 2498728714, 1787650658, 3930680310,
         972159757, 2207792600,  140153462,
        781219484, 2330862118,  564677516, 3817404564,  793439739,
         750206619, 1829358051,  325882027,
       1846108215,  556406094,  373078673, 1706636397,  169678874,
        1828428713, 1934824813,  120012009,
       1903913053, 1863273796,  529064525, 3685995747,  114945169,
        2352669574, 3242316017,  589707036,
       2547915866, 1562750627, 2135416965,  675196539,  603068015,
        2770592113, 1887931341,  337277790,
        326404143, 1808498563, 1012551197, 4077793480, 3359871339,
        3071281815,  405950006,  648523770,
       1091337187,  213987876, 1903197240,   68905059, 2306523030,
        4239939850, 2541797005,  630900817,
       3943559326, 2982167294, 2895319444, 4029159472, 3769533323,
         651967826, 1513402214,  464022380,
       3954440398, 4196576133, 1452947738, 2613195430,  542836367,
        2576682844, 3357088661,  169931339,
       3260595584, 1714846725, 4040012531, 1770770137, 3002358822,
        4009112187,  961639661,  427216953,
       4257233355, 1690115727, 1428482124,  914350381, 1676578405,
        3954874609, 2906587511,  318112916,
       3332797896, 1323125306, 1129920927,  147086033, 1463544098,
        2465437611, 2207200983,  717752483,
        413349089, 1320724241, 3493981701, 1988773127, 1532856497,
         991857704, 2170858508,  129438010,
       1969894503, 3323849437, 3582994475, 1944075467, 2385364783,
         691001044, 2317650345,  426890082,
       3181530375,  611592688,  930862501, 3433635460, 2115478804,
        2908030344, 1921925379,  632607861,
       1323490735, 2924753258, 3717912329,  328080512, 3541113668,
        2229697194, 4002558861,   36368121,
       3937165959, 1474695536, 2943993705,  210182647, 2681910953,
        1100113329,  444119748,   46262437,
         83066030, 2051642742, 2189158538, 2253589934,   91853753,
        3029564213, 2416589194,  642149690,
        298663821, 4273372205, 3009713881,  859484334,  524205846,
        2126697269,  353020599,  166825300,
        307317207, 2094160024, 4156730793,  561407368, 2753535108,
        4272000006, 2962374156,  806053468,
       1599787642, 4057595469, 3898749680, 4217037957, 1498537210,
         871801915, 2720033994,  278411320,
       2681226475,  836793194, 1085770332, 1803301739, 2375888287,
        1002166308, 1206266621,  253710777,
        379641732, 1181812292, 1667201557, 1747336846,   19479706,
         221026531, 1403529631,  133789427,
       2394054958, 3035658350, 4211575752, 1533302100, 2040945056,
        3630604382, 1250200725,  556878872,
       2740691173, 2244460851, 4166375547, 1661941022, 1613703082,
        3681089558, 3929032588,  324668178,
        848361050, 2428767449, 1751939158,  930534878, 1708668560,
        2575715446,   25970855,  204105831,
       3519904124, 3483737899, 1095242164, 1897516805, 1771012245,
         663067065, 1636049323,   63863245,
       2961506485, 2423676060, 3153385668, 2978402438, 1589131512,
        1430680801, 1356761787,  774326029,
       3702101694, 1555132674, 4232765991, 1609416183, 3625072240,
        3268107613, 2887827389,  592714969,
       1887195547, 2436507433,  361119882,   66655925, 3554671967,
         694431267, 1806243409,  767522135,
        131239009, 2551111058, 3072114421, 3486180868,  350044563,
        3984861080, 1433562966,  580325517,
        701728393,  825400836, 1358540263, 3261081817, 2144889377,
         262539165, 3593645499,   72597784,
       3842360863, 3409370591, 1389777867, 1144806143, 1421485838,
        2458290984,  739468240,  694039377,
       2125825614, 3966862354, 1663743105, 1642145298, 3792256483,
        2691230740, 3478305277,  184954836,
        446534746, 4092053162,  330669054, 4135935219, 2118365572,
        3413229203, 1913639384,  222749753,
       2334100553, 2852084267, 3240887024, 4026763627,  809315922,
         138762762, 2035235612,  720575233,
        791910367, 4014237829, 2941567753,  224782043, 2685381903,
         751896048, 2926920407,  765073075,
       3898109802,  805093573, 3845605776, 4099781065, 2098088337,
        2589293906, 4202282621,  526428113,
       1396018716, 2468941876,  948858902,  705380669, 2190567602,
        2894192983, 1936944272,  421065520,
       1620956069, 1580467885, 2124388438, 2643983957, 4144713019,
        3772860103, 3836232961,  273637688,
       3010016613, 3365126735, 3026673418,  724383531, 2508071605,
        1107014278,  207319612,  155733439,
       3673960965, 2334349144, 3036032335, 1036147609, 1136347533,
        3345302496,  579873853,  279478247,
       1372836659, 3945203694, 4206015213,  747315807, 4133938497,
        4226961243, 1398992634,  163972681,
       2101093204, 1424835933, 2791165620, 3171281869,  574602887,
         740356289,  372446222,  195508013,
       2037006064, 2997745941, 1494519836, 3231767519, 1283948857,
        1368639145, 3920500987,  247478539,
       3399398284, 2815487644, 1262221391, 2397002513, 1448418352,
        4138450937, 4122873502,  278459996,
       2481631390, 2716319234, 3574623474, 1490353317, 3087733593,
        4278328577, 1902771357,  128106480,
       1818906438, 3487112449,  808678066, 2453214315, 2889654693,
        2803243575, 2747847850,  433442652,
        807356132,  126526994, 3372800810,  996616503, 1144405012,
        3819125804,  467568153,  452239479,
       1159771623, 1835406364, 2724279828,   22774033, 1133861193,
         313693413,  542449844,  321040456,
       1568282576, 2412745155,  994610147, 1286950989, 2447823656,
        3584457099,  493154430,  314976840,
        100806967,  522833801, 2017223589, 3414822671, 4212237114,
        1644310508, 1227657252,  103866379,
       2676013404, 3096791863, 2610502739, 1247311196,  709258870,
        4082398909,  259762459,   18648812,
       4219706734, 2478855887,  839258267, 3466769642, 1524392566,
        1235365103, 3084172313,  801938193,
       1352214628,  453993738, 2067895399, 3969525725, 2373138425,
        3604290508,  722744028,  719172632,
        868813389, 3608909196, 1473610813, 1603738636, 2350216710,
        3530195022, 1768658633,  303753919,
       2986757343,  799728362,  993980301, 3128140043, 2699081290,
        1374264619, 1671531904,  265882504,
         44502811, 1578447245,  193083759, 3411173437, 3543178040,
        1114877688, 3427142847,  645742793,
        430310307, 4002236114, 1169893381, 3673815312,  612489091,
        1361605219, 4164609548,    7204382
};

static uint32_t poly_fft_out_test[] = {
2053608738, 3118687371, 4131704745, 1621587070, 2901493216,
        3034797138, 1781448047,   19315477,
       4266429873,   84348174,   83351477, 3003903113,   78190504,
        1436542436,  314368119,  804288474,
       2788585623, 1472746235, 3573220975,  848552785, 2919904227,
         954796094, 3462548693,  571914603,
        401826539, 3475563841,  199484536, 2966326145, 4270451353,
        2701514524, 3029649920,  234127160,
       3639020218, 2079828251, 1696988739, 3467179665, 3996743557,
        2077592408, 1098278675,  226317637,
       2839197650, 1954301807, 3127454631, 2318394533, 2670662999,
        2082332577,    1827532,   11226978,
       2040084109, 1758589906,  643354217, 1327602286, 3724837863,
        1415585211, 3061470454,  414257598,
       3759942877, 2667300552, 4024690427,   27822905, 1077848865,
        3178294126, 3953095166,  768040754,
        415395639, 2545178176, 2619071542, 3672503938,  672295498,
        3539853397, 3568298897,  268213731,
       1914403629, 1886701032, 2021910928, 3746761805, 1492983872,
        1743822671,  505092251,   82844776,
       3419596085,  975782258, 1253244635, 3829785435, 4057683972,
        4157337792, 1330903460,  392602307,
       3056677800, 4026998481, 1747748434,  335659234, 1785839296,
         713508666, 3608390448,  341440898,
       4164054962, 4155281169, 3046706027, 3670494999,  787947456,
        2063782724,  921649567,  255086595,
       2318520270, 3122548537, 2800599376, 2045811999,  811518262,
        3416247294,  656649063,  770978835,
       3286703139, 1468124730, 1963469373, 4170176923,  908946023,
        2487697577, 4092027385,  350524514,
       3777151738,   40158652,  940606074, 3801258701, 1726902624,
        1404290701, 3701867745,   94175772,
       3938030072, 1208562934, 2105522700, 2181914818, 2868569354,
        3238562795, 3141205213,  528721282,
       2748994688, 1995331688, 3134944328, 3839667419,  488930663,
         884412558, 2290665080,   43938042,
        598234352, 2086121093,  696232417, 4168412404,  634382570,
        2748983673, 2700527749,  100057671,
       1475191321, 3667280141, 3468402623, 3895945664, 3788092210,
        1144062797,  986461748,  534224593,
       3122209061, 3416128812, 3730819366, 4000836130, 3542721901,
        3401635654, 2035328738,  384061157,
       3882049720, 3108719772,  858958273,  220440001, 2721411247,
        2278230139,    3842867,   49498364,
       1301739431, 2892852663, 1230459402, 1627581382, 1338903509,
        1135784549, 1404603395,  389597172,
       1788515754, 1255499063, 1345726739, 3818789402, 1855826632,
         579472794, 2733708782,   38952538,
       1047240572, 1092317130, 4010780093, 1331657344,  138277423,
        2475262062, 3882106265,   33786346,
       1280613702, 3687820838, 1115487459, 2798341684,  127232813,
        2269482021, 2922790870,  155794182,
       1199243883, 1155328638, 3063954814, 2422872934, 3089714103,
        3046353737,  988508329,  498057082,
       3881802027, 3226688456, 1036480522, 1311875143, 3960901867,
        1917473148, 3123164095,  375916973,
       3895617400,  597973090,  664680884, 1785312663, 4226184502,
        3684413343, 3529799722,  585293962,
       1399570002, 3320236424, 2024970276, 3248586407, 1444627933,
        3764552534, 4133379269,  598907905,
       2657939041, 2719959472, 3121478253, 1960716505,  657087266,
        3624759543, 3591131102,  587043774,
       1074196139,  861536073, 2587608878,   50194512,  396290092,
        3893614030, 2293021420,  714176420,
       1559676416, 3306548854, 2196925653, 1891151375,   90604704,
        3105649091, 3025627821,  306970882,
        351642578, 2500960906, 2559653911, 4290151436, 3262924930,
        1535444748, 1326344356,   95734224,
       1666372917,  959625819, 3386598066,  681572441, 2647977659,
        2186626692, 3013396725,  758911854,
       1993416032, 3597651540,  345921544, 3288312567, 2995744672,
        3166308014,  647296005,  257877903,
       1240056897, 1701835592,  222701091, 2768092873, 3838720106,
        1836461406, 1175377562,  409553360,
       2179186180, 3021698791, 3014707372,  618905528, 1112549874,
         916834579, 2777645315,  343147647,
       2817952407, 3297272724, 2304673580, 1791503565,   11707150,
         747051784, 1036092175,  725225203,
        270316494, 2098780313, 1487737855,  418723249,  502865192,
         119860493, 1469778256,  530966941,
        320860230, 3861293553, 2031630355, 2964078457, 3755522959,
        1221793235, 4146935811,  293865761,
       2420078152, 2607550333, 1380934768, 2396323782, 2477579434,
        3209334850, 3025919612,  332651197,
       2850194733, 2183066663,  302533561, 1691703266, 1616969478,
         810556278, 2700205932,  154469263,
        539747260,  871486242, 2742784182,  667485629, 3860699570,
        3468746967, 1734375162,  525248468,
       2032257339, 2564070124,  656004990, 4173569376, 1984977773,
        1083674003, 3095262367,  166503423,
       2934856133, 4177390153, 3806818520, 1511491303, 2243952500,
        2322767608, 2219606958,  629918389,
       3543466072, 1586676681, 2591479640, 1546152016, 4150705977,
        3878403991,  475944473,  415736909,
        307762625, 3556384706,  729622532,  397162111, 3346115921,
        1429736257, 2588340913,  438656897,
       1045642205, 1595966821, 3697530477, 1001261233, 2894735577,
         709392974,  752984354,  355996299,
         62949608,  274473069, 3943821346,  580387033,  669855097,
        4074317738,  785984248,  244894274,
       3328739727, 2216520886, 3209033004,   22320652, 1781146048,
        3556535529, 4014309058,  716335053,
       2423783344, 2345650957, 3712107092, 3349723974, 2199693283,
        2540996863, 1271344297,  492558665,
       2058838794,  194796483, 2344803121, 3775666314, 3938092075,
         802194099, 4096004238,  335490636,
       4144128527, 2692987785,  535287528, 1991976535, 2099782849,
          92323513, 2218238203,  292144485,
       1912336747, 4060927800,  795817925, 1340781280, 3617227946,
         451887431,  440011641,  125182672,
        979597171,  921239811, 1713084488, 2356361420,   49950631,
        3256897794, 3006290202,  207330914,
       2409012409,  649687944, 2865620338, 3859709606, 2733638323,
        1892387286,  481197651,   35315975,
       1499649374, 2520949158,  448384802, 3716690290, 2689611138,
        4207647897, 2454027078,  739038669,
       1571086415,  224424295, 1481321513,  854355652, 3394406786,
        2048832774,  927403485,   39151843,
       4066626464, 2928840279, 3558009042, 4226113683, 2859466874,
        3927403709, 3446279649,  792159522,
        437576724,  312641806, 1072353571,  904672314, 1074048210,
        2696744755, 2526663199,  665105322,
       2939274029,   38018627, 3030231469, 2915155521, 3456954393,
        2033825656, 1825897192,  442294373,
       1231256473, 3375491713, 3471579245, 1069421615, 3101847642,
        3642261865, 2313322282,   61481101,
       2775763992, 1811173396, 3903098109,  103303657, 2185145587,
        2434301673,  987508062,  754139955,
       2956154365, 4276785520,  797556187, 1868670398, 2075586015,
        2638658499,  271768972,  503042873,
        803595850,  615752722, 3315204730, 1293975317, 3965191894,
        3183885501,  910533577,  357461909,
       2752211139, 2497520675, 3380228340, 3534873293, 4239567937,
        1439904404, 1884198301,  319623631,
       3112832639, 3515578269,   58495274, 1069069543, 1717679973,
        2503204471, 2085971913,  495964605,
       4267604959,  332077639, 4049840853, 3718993765, 2526029133,
        2812505456, 1299159964,  166403823,
        276678177, 2213842867,  734507354,  479687430, 3577427826,
        1235424827, 1335887344,  144556938,
       3325763431, 3147096703,  322548002, 2349323418, 4272328792,
        3766376985,  592772180,  105797105,
       4025696342, 3932265236, 3977412319,  728611830,  856354355,
        1080820661, 3078806180,  577323233,
       4241221026, 3753978149, 3821297571,  839308461,  105617692,
        1358507845,  628398822,  642040827,
       3208077419, 3798716889, 1411794728, 1790980116, 1961121291,
        1593145798, 3760587364,  176419621,
       3592043001, 1099984757, 1948876631,  431769669, 1144611529,
        3840679642, 2668425406,  318148031,
        531565788,  342163059,  641567052,  832966330, 2103481695,
        1934912414, 2648188420,  593032261,
       4121211492,  354167322,  827924257, 2172529360, 3568546182,
        3907034363,  830856311,  685056411,
       4269421023,  983895459, 2595681850, 3193929857, 3313097380,
         980578772, 3753103895,  121997420,
        588988679,  358037846, 3655005478, 1562477530, 1858995706,
        1188606996, 3570987739,  560679437,
         73237248,  351361406, 3651932495, 2805103284,  982626553,
        1555237868, 2824807095,  526846097,
        139416499, 3148174963,  134685940, 3207257079, 3994577252,
        2006548151, 1240974124,  162806923,
       1276994669,  588918578,  763141855, 2117038252, 1476074326,
        1711926658,  881673790,  479221854,
       3720775595, 3650179729, 1512315918, 1133653233,  625837519,
        3062130993, 3859768533,  580079407,
       3052088805, 2713304189,  470793501, 3740891124, 2657129974,
        2358817100, 3184212158,  201491551,
        619063588, 3291487246, 2509150049,  236490278, 2083716325,
        3589785334, 2077465786,  153889544,
       2546811054,  640058933, 2833305437, 1374633370,  966092800,
        1983130997,  411982212,   27077750,
       2866607585, 4092089565, 3854265519, 3321005016, 2181947020,
        1599481175, 1125769503,  702674580,
       4017232388, 2411598288, 2748363390, 3250362705, 3985310584,
        4280000754, 3517887887,  576350346,
       2418622818, 1953108228,  555768959,  315089050, 1426949365,
         390973250, 2410988356,  143441024,
       2745280127, 1772393660,  555097690, 1117702857, 2033366566,
        3033876524, 1250253392,  361192732,
       1736306169, 1837692883, 1691012615, 3361838340, 4097445397,
        1336407360, 2642014870,  643353884,
        967864733, 3787269862, 1698318014, 3687951221,  263283242,
        1099704801, 2005806495,  686170874,
       1769359151, 1246442005, 3399960925,  236618129, 2888752045,
        1109806971, 2041221010,  567483592,
       1858172248, 2699045827, 1069454145, 1255140673,  119697242,
        1756169058,  933467633,  714548516,
       1948689351,  791366609, 2905001172, 3442279055,  907889192,
        3766948628, 3371332862,  676463806,
       1150803010, 1918129338, 1241881672, 3523050615, 3330292829,
        1766157631,  925547645,  618663564,
        535276000,  291834964, 3482514572, 3239808071, 3141211527,
        2121036111, 2998353032,   30995957,
       2878619474, 1541288335, 1448513759, 2034286194, 2190307734,
         549268379, 3437776712,  220095479,
       2422128261, 2771768477,  109070149, 4000022102, 2872022841,
         719521593, 3284879604,  528792309,
       3260353982,  870834114,  536782568, 3516487040,  594278335,
        4085579412,   41307355,  336698274,
        507570336, 2788900845, 3366108526, 2215701998,  866167913,
        4165754564,  980652261,  729916241,
       2565038227, 1565704755, 4091676100, 3619210001,  840390783,
         864314971,  872708201,  140558536,
       1564232641, 1472340069,   11793268,  661915420, 3090586462,
         961035501, 3037902952,  780531630,
        682011997, 1743522581, 2037121119, 1679542014, 1047504293,
        3803902175, 3471125626,  253918158,
        404820260, 1670217034, 2269405615, 3226507964, 1235053403,
        3907862920, 1711098421,  690429901,
       1182024986,   25584924, 1904962076, 2135009850,  626547819,
        3857831340, 2419667038,  728649345,
       3964877368, 2239430298,  485158685, 4270134695, 2329236652,
         645160639, 1823529412,  697804343,
       3300100273, 2549221051, 2377830644, 2460116419, 1162042337,
        2005435002, 3831980704,  197686075,
        144775865, 2927184046, 3198201833,  109158247, 4149510343,
        2108371580,  220611373,  203756540,
       3855607074, 2299105528, 3611397919, 3679300771, 1270278425,
         739577096,   20819213,  773711840,
        524274715, 2065503548, 3599200550, 1235232093,  753739967,
        2861654010, 1077125969,  435632698,
       2075123429, 1706936365, 1181463055, 1034509113, 2077463659,
        2996486174, 3021378986,  786025778,
       3982690554,   93276768, 1969861898,   37285849,  996884457,
          39448914,  572979879,  334920773,
       3113772137, 3797403767,  525056098, 3679165231, 3478767486,
         402423716, 3766064797,  235082675,
       1698118287,  778780610, 3742500701, 2716255132, 3703913118,
         679536135, 1019069228,  709876602,
       1636749745, 3706168929, 1994616490, 1534819011,  946386767,
        1064653227, 4032922792,  736902057,
       3975001665, 4202743065, 4248920111, 4065232818, 2544532593,
        1680979024, 1560149924,  445850718,
       3857470225, 4076167851, 1653903617, 1508366519,  975794886,
        2535021361, 4149586777,  742057682,
       3288000741, 3915097057,  658176795, 1953279669, 2999237594,
        1881190582, 1266904931,   34879629,
       2305171975, 2427528517, 4127050388, 2076475450, 3920519105,
         400511873, 1521353727,  659307577,
       4215032925,  250283378,  444266890, 1383766868,  837010112,
        1344615044, 2518823766,   63335673,
        769672618,   70314228, 1139533731, 1479118572, 1466906501,
        2961385899, 2237009182,  415205503,
       3620117624, 2877898283,  811352288, 1882343051,  823853273,
        1790607680,  754894877,  646290139,
       4115194794, 2999668945, 1742940695, 3962017026, 3013758437,
        1887937968, 1859642607,  611125409,
       3202836286, 3667332410, 3313715120,  423653331, 3228082298,
        4008600444,  362085853,  310279591,
       3717989508, 3732060514, 1355434631, 2887337603, 2153222669,
        2944871172, 3750517717,  376924711,
       3670710863,   68142760, 4023533774, 2084715606, 1481934864,
         164349263, 1190987408,  718654758,
       2314369364, 2087043050,  767362944, 1628619798,  795880769,
        2893528614,   71403774,  774370551
};
#endif 


void mpAddWithCarryProp(uint32_t *A, uint32_t C, int SDigit, int max_digit);
uint32_t mpAdd(uint32_t w[], const uint32_t u[], const uint32_t v[], size_t ndigits);
int spMultiply(uint32_t p[2], uint32_t x, uint32_t y);
int mpMultiply(uint32_t p[3], uint32_t x[2], uint32_t y);
int mpCompare(const uint32_t a[], const uint32_t b[], size_t ndigits);
uint32_t mpSubtract(uint32_t w[], const uint32_t u[], const uint32_t v[], size_t ndigits);
uint32_t reverse(uint32_t x, uint32_t bits);
inline void swap(uint32_t *x, uint32_t *y);
void subm_h(uint32_t *z, const uint32_t *x, const uint32_t *y, uint32_t pidx);
void addm_h(uint32_t *z, const uint32_t *x, const uint32_t *y, uint32_t pidx);
void transpose_h(uint32_t *mout, uint32_t *min, uint32_t in_nrows, uint32_t in_ncols);

void setRandom(uint32_t *x, uint32_t);
void printNumber(uint32_t *x);

void printNumber(uint32_t *x)
{
     for (uint32_t i=0; i < NDIGITS; i++){
    printf("%u ",x[i]);
     }
     printf ("\n");
}

void setRandom(uint32_t *x, uint32_t ndigits)
{
  int i;

  for (i=0; i< ndigits; i++){
    x[i] = rand(); 
  }
}

/****************************************************************************/
/**
* This function implements the Montgomery Modular Multiplication (MMM)
* Finely Integrated Operand Scanning (FIOS) algorithm. The FIOS method
* interleaves multiplication and reduction operations. Requires NDigits+3
* words of temporary storage.
*
* U = MontMult(A,B,N)
*
* Reference:
* Analyzing and Comparing Montgomery Multiplication Algorithms
* IEEE Micro, 16(3):26-33,June 1996
* By: Cetin Koc, Tolga Acar, and Burton Kaliski
*
* @param U is the MMM result
* @param A is the n-residue input, A' = A*R mod N
* @param B is the n-residue input, B' = B*R mod N
* @param N is the modulus
* @param NPrime is a pre-computed constant, NPrime = (1-R*Rbar)/N
* @param NDigits is the integer precision of the arguments (C,A,B,N,NPrime)
*
* @return None.
*
* @note  None.
*****************************************************************************/
void montmult_h(uint32_t *U, uint32_t *A, uint32_t *B, uint32_t pidx)
{
  int i, j;
  uint32_t S, C, C1, C2, M[2], X[2];
  uint32_t T[MAX_NDIGITS_FIOS];

  memset(T, 0, 4*(NDIGITS+3));

  for(i=0; i<NDIGITS; i++) {
    // (C,S) = t[0] + a[0]*b[i], worst case 2 words
    spMultiply(X, A[0], B[i]); // X[Upper,Lower] = a[0]*b[i]
    C = mpAdd(&S, T+0, X+0, 1); // [C,S] = t[0] + X[Lower]
    mpAdd(&C, &C, X+1, 1);// [~,C] = C + X[Upper], No carry

    //printf("0 - C : %u, S: %u\n",C,S);
    //printf("0 - A[0] : %u, B[i]: %u T[0] : %u\n",A[0],B[i], T[0]);
    // ADD(t[1],C)
    mpAddWithCarryProp(T, C, 1, MAX_NDIGITS_FIOS);
    //printf("T\n");
    //printNumber(T);

    // m = S*n'[0] mod W, where W=2^32
    // Note: X[Upper,Lower] = S*n'[0], m=X[Lower]
    spMultiply(M, S, NPrime[pidx*NDIGITS]);
    //printf("M[0]:%u, M[1]: %u\n",M[0], M[1]);

    // (C,S) = S + m*n[0], worst case 2 words
    spMultiply(X, M[0], N[pidx*NDIGITS]); // X[Upper,Lower] = m*n[0]
    C = mpAdd(&S, &S, X+0, 1); // [C,S] = S + X[Lower]
    mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper]
    //printf("1 - C : %u, S: %u\n",C,S);

    for(j=1; j<NDIGITS; j++) {
      // (C,S) = t[j] + a[j]*b[i] + C, worst case 2 words
      spMultiply(X, A[j], B[i]);   // X[Upper,Lower] = a[j]*b[i], double precision
      C1 = mpAdd(&S, T+j, &C, 1);  // (C1,S) = t[j] + C
      //printf("2 - C1 : %u, S: %u\n",C1,S);
      C2 = mpAdd(&S, &S, X+0, 1);  // (C2,S) = S + X[Lower]
      //printf("3 - C2 : %u, S: %u\n",C1,S);
      //printf("X[0] : %u, X[1]: %u\n",X[0],X[1]);
      mpAdd(&C, &C1, X+1, 1);   // (~,C)  = C1 + X[Upper], doesn't produce carry
      //printf("4 - C : %u\n",C);
      mpAdd(&C, &C, &C2, 1);    // (~,C)  = C + C2, doesn't produce carry
      //printf("5 - C : %u\n",C);

      // ADD(t[j+1],C)
      mpAddWithCarryProp(T, C, j+1, MAX_NDIGITS_FIOS);
      //printf("T\n");
      //printNumber(T);

      // (C,S) = S + m*n[j]
      spMultiply(X, M[0], N[j+pidx*NDIGITS]); // X[Upper,Lower] = m*n[j]
      C = mpAdd(&S, &S, X+0, 1); // [C,S] = S + X[Lower]
      mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper]
      //printf("6 - C : %u, S: %u\n",C,S);

      // t[j-1] = S
      T[j-1] = S;
      //printf("T\n");
      //printNumber(T);
    }

    // (C,S) = t[s] + C
    C = mpAdd(&S, T+NDIGITS, &C, 1);
    //printf("6 - C : %u, S: %u\n",C,S);
    // t[s-1] = S
    T[NDIGITS-1] = S;
    // t[s] = t[s+1] + C
    mpAdd(T+NDIGITS, T+NDIGITS+1, &C, 1);
    // t[s+1] = 0
    T[NDIGITS+1] = 0;
  }

  /* Step 3: if(u>=n) return u-n else return u */
  if(mpCompare(T, &N[pidx*NDIGITS], NDIGITS) >= 0) {
    mpSubtract(T, T, &N[pidx*NDIGITS], NDIGITS);
  }

  memcpy(U, T, 4*NDIGITS);
}


uint32_t reverse(uint32_t x, uint32_t bits)
{
  uint32_t y = 0;
  for (uint32_t i=0; i<bits; i++){
     y = (y << 1) | (x & 1);
     x >>= 1;
  }
  return y;
}

void transpose_h(uint32_t *mout, uint32_t *min, uint32_t in_nrows, uint32_t in_ncols)
{
  uint32_t i,j,k;

  for (i=0; i<in_nrows; i++){
    for(j=0; j<in_ncols; j++){
      for (k=0; k<NDIGITS; k++){
        //printf("OUT: %d, IN : %d\n",(j*in_nrows+i)*NDIGITS+k, (i*in_ncols+j)*NDIGITS+k);
        mout[(j*in_nrows+i)*NDIGITS+k] = min[(i*in_ncols+j)*NDIGITS+k];
      }
    }
  }
}
void ntt_parallel2D_h(uint32_t *A, uint32_t *roots, uint32_t Nrows, uint32_t fft_Ny,  uint32_t Ncols, uint32_t fft_Nx, uint32_t pidx)
{
  uint32_t Anrows = (1<<Nrows);
  uint32_t Ancols = (1<<Ncols);
  uint32_t Mnrows = Ancols;
  uint32_t Mncols = Anrows;
  uint32_t *M = (uint32_t *) malloc (Anrows * Ancols * NDIGITS * sizeof(uint32_t));
  uint32_t *reducedR = (uint32_t *) malloc (MAX(Mncols,Mnrows) * NDIGITS * sizeof(uint32_t));
  uint32_t i,j;
  

  transpose_h(M,A,Anrows, Ancols);

  for(i=0;i<Mncols;i++){
    memcpy(&reducedR[i*NDIGITS], &roots[i*NDIGITS*Mnrows],sizeof(uint32_t)*NDIGITS);
    //if (i % 32 == 0){
      //printNumber(&reducedR[i*NDIGITS]);
    //}
  }


  for (i=0;i < Mnrows; i++){
    ntt_parallel_h(&M[i*NDIGITS*Mncols], reducedR, fft_Ny, fft_Nx, pidx);
    for (j=0;j < Mncols; j++){   
        //printf("IN(:%d/%d)\n",i,j); 
        //printNumber(&M[i*NDIGITS*Mncols+j*NDIGITS]);
        //printNumber(&roots[i*j*NDIGITS]);
        montmult_h(&M[i*NDIGITS*Mncols+j*NDIGITS], &M[i*NDIGITS*Mncols+j*NDIGITS], &roots[i*j*NDIGITS], pidx);
        //printf("OUT(:%d/%d)\n",i,j); 
        //printNumber(&M[i*NDIGITS*Mncols+j*NDIGITS]);
    }
  }


  transpose_h(A,M,Mnrows, Mncols);

  for(i=0;i<Mnrows;i++){
    memcpy(&reducedR[i*NDIGITS], &roots[i*NDIGITS*Mncols],sizeof(uint32_t)*NDIGITS);
  }

  for (i=0;i < Anrows; i++){
    debug_rowidx = i;
    //for (j=0;j < Ancols; j++){   
        //printf("IN(:%d/%d)\n",i,j); 
        //printNumber(&A[i*NDIGITS*Ancols+j*NDIGITS]);
    //}
    ntt_parallel_h(&A[i*NDIGITS*Ancols], reducedR, fft_Ny, fft_Nx, pidx);
    //for (j=0;j < Ancols; j++){   
        //printf("OUT(:%d/%d)\n",i,j); 
        //printNumber(&A[i*NDIGITS*Ancols+j*NDIGITS]);
    //}
  }

  transpose_h(M,A,Anrows, Ancols);
  memcpy(A,M,Ancols * Anrows * NDIGITS * sizeof(uint32_t));
  //for (i=0;i < Anrows; i++){
    //for (j=0;j < Ancols; j++){   
        //printf("OUT(:%d/%d)\n",i,j); 
        //printNumber(&A[i*NDIGITS*Ancols+j*NDIGITS]);
    //}
  //}

  free(M);
  free(reducedR);

}

void ntt_parallel_h(uint32_t *A, uint32_t *roots, uint32_t Nrows, uint32_t Ncols, uint32_t pidx)
{
  uint32_t Anrows = (1<<Nrows);
  uint32_t Ancols = (1<<Ncols);
  uint32_t Mnrows = Ancols;
  uint32_t Mncols = Anrows;
  uint32_t *M = (uint32_t *) malloc (Anrows * Ancols * NDIGITS * sizeof(uint32_t));
  uint32_t *reducedR = (uint32_t *) malloc (MAX(Mncols/2,Mnrows/2) * NDIGITS * sizeof(uint32_t));
  uint32_t i,j;
  

  transpose_h(M,A,Anrows, Ancols);

  for(i=0;i<Mncols/2;i++){
    memcpy(&reducedR[i*NDIGITS], &roots[i*NDIGITS*Mnrows],sizeof(uint32_t)*NDIGITS);
  }


  for (i=0;i < Mnrows; i++){
    ntt_h(&M[i*NDIGITS*Mncols], reducedR, Nrows, pidx);
    for (j=0;j < Mncols; j++){  
        //if (i==0){
           //printf("IN(:%d/%d)\n",i,j); 
           //printNumber(&M[i*NDIGITS*Mncols+j*NDIGITS]);
           //printNumber(&roots[i*j*NDIGITS]);
        //} 
        montmult_h(&M[i*NDIGITS*Mncols+j*NDIGITS], &M[i*NDIGITS*Mncols+j*NDIGITS], &roots[i*j*NDIGITS], pidx);
        //memcpy(&M[i*NDIGITS*Mncols+j*NDIGITS],&roots[i*j*NDIGITS],sizeof(uint32_t)*NDIGITS);
        //if (i==0){
           //printf("OUT(:%d/%d)\n",i,j); 
           //printNumber(&M[i*NDIGITS*Mncols+j*NDIGITS]);
        //}
    }
  }

  
  transpose_h(A,M,Mnrows, Mncols);

  for(i=0;i<Mnrows/2;i++){
    memcpy(&reducedR[i*NDIGITS], &roots[i*NDIGITS*Mncols],sizeof(uint32_t)*NDIGITS);
  }

  for (i=0;i < Anrows; i++){
    //for (j=0; j < Ancols; j++){
           //printf("IN(:%d/%d/%d)\n",debug_rowidx,i,j); 
           //printNumber(&A[i*NDIGITS*Ancols+j*NDIGITS]);
    //}
    ntt_h(&A[i*NDIGITS*Ancols], reducedR, Ncols, pidx);
    //for (j=0; j < Ancols; j++){
           //printf("OUT(:%d/%d/%d)\n",debug_rowidx,i,j); 
           //printNumber(&A[i*NDIGITS*Ancols+j*NDIGITS]);
    //}
  }

  transpose_h(M,A,Anrows, Ancols);
  memcpy(A,M,Ancols * Anrows * NDIGITS * sizeof(uint32_t));

  free(M);
  free(reducedR);
}


inline void swap(uint32_t *x, uint32_t *y)
{
  uint32_t tmp[NDIGITS];

  memcpy(tmp, x, sizeof(uint32_t)*NDIGITS);
  memcpy(x,y, sizeof(uint32_t)*NDIGITS);
  memcpy(y,tmp, sizeof(uint32_t)*NDIGITS);
}

/*
   Computes the forward number-theoretic transform of the given vector in place,
   with respect to the given primitive nth root of unity under the given modulus.
   The length of the vector must be a power of 2.

   Powtable is table with nth root roots of unity where n is the number of points in NTT
   Only N/2 roots of unity are needed

   NOTE https://www.nayuki.io/page/number-theoretic-transform-integer-dft
*/
void ntt_h(uint32_t *A, uint32_t *roots, uint32_t levels, uint32_t pidx)
{
   uint32_t *vector = A;
   uint32_t n = 1 << levels;
   uint32_t i,j,k,l,size, halfsize, tablestep;
   uint32_t left[NDIGITS], right[NDIGITS];

   for (i=0; i < n ; i++){
      j = reverse(i, levels);
      if (j > i){
         swap(&vector[i*NDIGITS],&vector[j*NDIGITS]);
      }
   }

   size = 2;
   while (size <= n){
     halfsize = size >> 1; 
     tablestep = n/size;
     for (i=0; i<n; i+=size){
        k = 0;
        for (j=i; j<i+halfsize; j++){
           l = j + halfsize;
           memcpy(left, &vector[j*NDIGITS], sizeof(uint32_t)*NDIGITS);
           montmult_h(right,&vector[l*NDIGITS], &roots[k*NDIGITS], pidx);
           addm_h(&vector[j*NDIGITS], left, right, pidx);
           subm_h(&vector[l*NDIGITS], left, right, pidx);
           k += tablestep;
        }
     }
     size *= 2;
  }
}

void addm_h(uint32_t *z, const uint32_t *x, const uint32_t *y, uint32_t pidx)
{
   uint32_t tmp[NDIGITS];
   mpAdd(tmp, x, y, NDIGITS);
   if(mpCompare(tmp, &N[pidx*NDIGITS], NDIGITS) >= 0) {
      mpSubtract(tmp, tmp, &N[pidx*NDIGITS], NDIGITS);
   }

   memcpy(z, tmp, sizeof(uint32_t)*NDIGITS);
}

void subm_h(uint32_t *z, const uint32_t *x, const uint32_t *y, uint32_t pidx)
{
   uint32_t tmp[NDIGITS];
   mpSubtract(tmp, x, y, NDIGITS);
   if(mpCompare(tmp, &N[pidx*NDIGITS], NDIGITS) >= 0) {
       mpAdd(tmp, tmp, &N[pidx*NDIGITS], NDIGITS);
   }

   memcpy(z, tmp, sizeof(uint32_t)*NDIGITS);
}

void find_roots_h(uint32_t *roots, uint32_t *primitive_root, uint32_t nroots, uint32_t pidx)
{
  uint32_t i;
  
  memcpy(roots,&_1[pidx*NDIGITS],sizeof(uint32_t)*NDIGITS);
  memcpy(&roots[NDIGITS],primitive_root,sizeof(uint32_t)*NDIGITS);
  for (i=2;i<nroots; i++){
    montmult_h(&roots[i*NDIGITS], &roots[(i-1)*NDIGITS], primitive_root, pidx);
  }

  return;
}

/****************************************************************************/
/**
* This function performs a carry propagation adding C to the input
* array A of size NDigits, given by the first argument starting from
* the first element SDigit, and propagates it until no further carry
* is generated.
*
* ADD(A[i],C)
*
* Reference:
* Analyzing and Comparing Montgomery Multiplication Algorithms
* IEEE Micro, 16(3):26-33,June 1996
* By: Cetin Koc, Tolga Acar, and Burton Kaliski
*
* @param A is an input array of size NDigits
* @param C is the value being added to the input A
* @param SDigit is the start digit
* @param NDigits is the integer precision of the arguments (A)
*
* @return None.
*
* @note  None.
*****************************************************************************/
void mpAddWithCarryProp(uint32_t *A, uint32_t C, int SDigit, int max_digit)
{
 int i;
 int j=0;

 for(i=SDigit; i<max_digit; i++) {
   C = mpAdd(A+i, A+i, &C, 1);

   if(C == 0) {
     //if (j > 0) {
           //printf("%d\n",j);
     //}
     return;
   }
   j++;
 }
 //if (j > 0) { printf("%d\n",j);}
}

uint32_t mpAdd(uint32_t w[], const uint32_t u[], const uint32_t v[], size_t ndigits)
{
 /* Calculates w = u + v
  where w, u, v are multiprecision integers of ndigits each
  Returns carry if overflow. Carry = 0 or 1.
  Ref: Knuth Vol 2 Ch 4.3.1 p 266 Algorithm A.
 */

 uint32_t k;
 size_t j;

 /* Step A1. Initialise */
 k = 0;

 for (j = 0; j < ndigits; j++) {
  /* Step A2. Add digits w_j = (u_j + v_j + k)
   Set k = 1 if carry (overflow) occurs
  */
  w[j] = u[j] + k;
  if (w[j] < k) k = 1; 
  else k = 0;

  w[j] += v[j];
  if (w[j] < v[j]) k++;

 } /* Step A3. Loop on j */

 return k; /* w_n = k */
}

int spMultiply(uint32_t p[2], uint32_t x, uint32_t y)
{
 /* Use a 64-bit temp for product */
 uint64_t t = (uint64_t)x * (uint64_t)y;
 /* then split into two parts */
 p[1] = (uint32_t)(t >> 32);
 p[0] = (uint32_t)(t & 0xFFFFFFFF);

 return 0;
}
int mpMultiply(uint32_t p[3], uint32_t x[2], uint32_t y)
{
 uint64_t t1 = (uint64_t)x[0] * (uint64_t)y;
 uint64_t t2 = (uint64_t)x[1] * (uint64_t)y;
 uint32_t c;

 /* then split into two parts */
 p[0] = (uint32_t)(t1 & 0xFFFFFFFF);
 p[1] = (uint32_t)(t1 >> 32) + (uint32_t)(t2 & 0xFFFFFFFF);
 c = p[1] < (uint32_t)(t2 & 0xFFFFFFFF);
 p[2] = (uint32_t)(t2 >> 32) + c;

 return 0;
}

int mpCompare(const uint32_t a[], const uint32_t b[], size_t ndigits)
{
 /* All these vars are either 0 or 1 */
 unsigned int gt = 0;
 unsigned int lt = 0;
 unsigned int mask = 1; /* Set to zero once first inequality found */
 unsigned int c;

 while (ndigits--) {
  gt |= (a[ndigits] > b[ndigits]) & mask;
  lt |= (a[ndigits] < b[ndigits]) & mask;
  c = (gt | lt);
  mask &= (c-1); /* Unchanged if c==0 or mask==0, else mask=0 */
 }

 return (int)gt - (int)lt; /* EQ=0 GT=+1 LT=-1 */
}
uint32_t mpSubtract(uint32_t w[], const uint32_t u[], const uint32_t v[], size_t ndigits)
{
 /* Calculates w = u - v where u >= v
  w, u, v are multiprecision integers of ndigits each
  Returns 0 if OK, or 1 if v > u.
  Ref: Knuth Vol 2 Ch 4.3.1 p 267 Algorithm S.
 */

 uint32_t k;
 size_t j;

 /* Step S1. Initialise */
 k = 0;

 for (j = 0; j < ndigits; j++)
 {
  /* Step S2. Subtract digits w_j = (u_j - v_j - k)
   Set k = 1 if borrow occurs.
  */
  w[j] = u[j] - k;
  if (w[j] > MAX_DIGIT - k) k = 1;
  else k = 0;

  w[j] -= v[j];
  if (w[j] > MAX_DIGIT - v[j]) k++;

 } /* Step S3. Loop on j */

 return k; /* Should be zero if u >= v */
}


#ifdef UTILS_DEBUG
// I am leaving this as a separate function to test both implementations are equal
void montsquare_h(uint32_t *U, uint32_t *A, uint32_t pidx)
{
  int i, j;
  uint32_t S, C, C1, C2, M[2], X[2], X1[2], carry;
  uint32_t T[MAX_NDIGITS_FIOS];

  memset(T, 0, 4*(NDIGITS+3));

  for(i=0; i<NDIGITS; i++) {
    // (C,S) = t[0] + a[0]*b[i], worst case 2 words
    spMultiply(X, A[i], A[i]); // X[Upper,Lower] = a[0]*b[i]
    C = mpAdd(&S, T+0, X+0, 1); // [C,S] = t[0] + X[Lower]
    mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper], No carry

    // ADD(t[1],C)
    mpAddWithCarryProp(T, C, 1, MAX_NDIGITS_FIOS);
    //carry = mpAdd(&T[1], &T[1], &C, 1); 

    // m = S*n'[0] mod W, where W=2^32
    // Note: X[Upper,Lower] = S*n'[0], m=X[Lower]
    spMultiply(M, S, NPrime[pidx*NDIGITS]);

    // (C,S) = S + m*n[0], worst case 2 words
    spMultiply(X, M[0], N[pidx*NDIGITS]); // X[Upper,Lower] = m*n[0]
    C = mpAdd(&S, &S, X+0, 1); // [C,S] = S + X[Lower]
    mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper]
    
    
    // (C,S) = t[j] + a[i+1]*a[i+1] + C, worst case 2 words
    spMultiply(X1, A[i+1], A[i]);
    C1 = mpAdd(&S, &T[i+1], &C, 1);  // (C1,S) = t[i+1] + C
    C2 = mpAdd(&S, &S, X1+0, 1);  // (C2,S) = S + X[Lower]
    mpAdd(&C, &C1, X1+1, 1);   // (~,C)  = C1 + X[Upper], doesn't produce carry
    mpAdd(&C, &C, &C2, 1);    // (~,C)  = C + C2, doesn't produce carry
   
    // ADD(t[i+2],C)
    mpAddWithCarryProp(T, C, i+2, MAX_NDIGITS_FIOS);
   
    // (C,S) = S + m*n[j]
    spMultiply(X, M[0], N[1+pidx*NDIGITS]); // X[Upper,Lower] = m*n[j]
    C = mpAdd(&S, &S, X+0, 1); // [C,S] = S + X[Lower]
    C1 = mpAdd(&S, &S, X1+0, 1); // [C,S] = S + X[Lower]
    C+=C1;
    C1=mpAdd(&S, &X1[1], X+1, 1);  // [~,C] = C + X[Upper]
    C+=C1;
    mpAdd(&C, &C, &S, 1);  // [~,C] = C + X[Upper]
   
    // t[j-1] = S
    T[0] = S;

    C2=0;
    for(j=2; j<NDIGITS; j++) {
      // (C,S) = t[j] + 2*a[j]*a[i] + C, worst case 2 words
      spMultiply(X, A[j], A[i]);   // X[Upper,Lower] = a[j]*b[i], double precision
      C1 = (X[0] >> 31)+C2;
      X[0] <<= 1;
      C2 = X[1] >> 31;
      X[1] = (X[1] << 1) + C1;
      C1 = mpAdd(&X[0], &X[0], &C, 1);
      C = mpAdd(&S, &T[j], &X[0], 1);
      C += C1;
      mpAdd(&C, &C, X+1, 1);  

      // ADD(t[j+1],C)
      mpAddWithCarryProp(T, C, j+1, MAX_NDIGITS_FIOS);
   
      // (C,S) = S + m*n[j]
      spMultiply(X, M[0], N[j+pidx*NDIGITS]); // X[Upper,Lower] = m*n[j]
      C = mpAdd(&S, &S, X+0, 1); // [C,S] = S + X[Lower]
      mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper]
   
      T[j-1] = S;
    }

    // (C,S) = t[s] + C
    C = mpAdd(&S, T+NDIGITS, &C, 1);
    //printf("6 - C : %u, S: %u\n",C,S);
    // t[s-1] = S
    T[NDIGITS-1] = S;
    // t[s] = t[s+1] + C
    mpAdd(T+NDIGITS, T+NDIGITS+1, &C, 1);
    // t[s+1] = 0
    T[NDIGITS+1] = 0;
  }

  /* Step 3: if(u>=n) return u-n else return u */
  if(mpCompare(T, &N[pidx*NDIGITS], NDIGITS) >= 0) {
    mpSubtract(T, T, &N[pidx*NDIGITS], NDIGITS);
  }

  memcpy(U, T, 4*NDIGITS);
}


// Improved speed (in Cuda at least) by substituting mpAddWithCarryProp by mpAdd
// I am leaving this as a separate function to test both implementations are equal
void montmult_h2(uint32_t *U, uint32_t *A, uint32_t *B, uint32_t pidx)
{
  int i, j;
  uint32_t S, C, C1, C2, M[2], X[2], carry;
  uint32_t T[MAX_NDIGITS_FIOS];

  memset(T, 0, 4*(NDIGITS+3));

  for(i=0; i<NDIGITS; i++) {
    // (C,S) = t[0] + a[0]*b[i], worst case 2 words
    spMultiply(X, A[0], B[i]); // X[Upper,Lower] = a[0]*b[i]
    C = mpAdd(&S, T+0, X+0, 1); // [C,S] = t[0] + X[Lower]
    mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper], No carry

    //printf("0 - C : %u, S: %u\n",C,S);
    //printf("0 - A[0] : %u, B[i]: %u T[0] : %u\n",A[0],B[i], T[0]);
    // ADD(t[1],C)
    //mpAddWithCarryProp(T, C, 1);
    carry = mpAdd(&T[1], &T[1], &C, 1); 
    //printf("T\n");
    //printNumber(T);

    // m = S*n'[0] mod W, where W=2^32
    // Note: X[Upper,Lower] = S*n'[0], m=X[Lower]
    spMultiply(M, S, NPrime[pidx*NDIGITS]);
    //printf("M[0]:%u, M[1]: %u\n",M[0], M[1]);

    // (C,S) = S + m*n[0], worst case 2 words
    spMultiply(X, M[0], N[pidx*NDIGITS]); // X[Upper,Lower] = m*n[0]
    C = mpAdd(&S, &S, X+0, 1); // [C,S] = S + X[Lower]
    mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper]
    //printf("1 - C : %u, S: %u\n",C,S);

    for(j=1; j<NDIGITS; j++) {
      // (C,S) = t[j] + a[j]*b[i] + C, worst case 2 words
      spMultiply(X, A[j], B[i]);   // X[Upper,Lower] = a[j]*b[i], double precision
      C1 = mpAdd(&S, T+j, &C, 1);  // (C1,S) = t[j] + C
      //printf("2 - C1 : %u, S: %u\n",C1,S);
      C2 = mpAdd(&S, &S, X+0, 1);  // (C2,S) = S + X[Lower]
      //printf("3 - C2 : %u, S: %u\n",C1,S);
      //printf("X[0] : %u, X[1]: %u\n",X[0],X[1]);
      mpAdd(&C, &C1, X+1, 1);   // (~,C)  = C1 + X[Upper], doesn't produce carry
      //printf("4 - C : %u\n",C);
      mpAdd(&C, &C, &C2, 1);    // (~,C)  = C + C2, doesn't produce carry
      //printf("5 - C : %u\n",C);
   
      // ADD(t[j+1],C)
      C += carry;
      carry = mpAdd(&T[j+1], &T[j+1], &C, 1); 
      //mpAddWithCarryProp(T, C, j+1);
      //printf("T\n");
      //printNumber(T);
   
      // (C,S) = S + m*n[j]
      spMultiply(X, M[0], N[j+pidx*NDIGITS]); // X[Upper,Lower] = m*n[j]
      C = mpAdd(&S, &S, X+0, 1); // [C,S] = S + X[Lower]
      mpAdd(&C, &C, X+1, 1);  // [~,C] = C + X[Upper]
      //printf("6 - C : %u, S: %u\n",C,S);
   
      // t[j-1] = S
      T[j-1] = S;
      //printf("T\n");
      //printNumber(T);
    }

    mpAddWithCarryProp(T, carry, NDIGITS, MAX_NDIGITS_FIOS);
    // (C,S) = t[s] + C
    C = mpAdd(&S, T+NDIGITS, &C, 1);
    //printf("6 - C : %u, S: %u\n",C,S);
    // t[s-1] = S
    T[NDIGITS-1] = S;
    // t[s] = t[s+1] + C
    mpAdd(T+NDIGITS, T+NDIGITS+1, &C, 1);
    // t[s+1] = 0
    T[NDIGITS+1] = 0;
  }

  /* Step 3: if(u>=n) return u-n else return u */
  if(mpCompare(T, &N[pidx*NDIGITS], NDIGITS) >= 0) {
    mpSubtract(T, T, &N[pidx*NDIGITS], NDIGITS);
  }

  memcpy(U, T, 4*NDIGITS);
}

void montmult_sos_h(uint32_t *U, uint32_t *A, uint32_t *B, uint32_t pidx)
{
 int i, j;
 uint32_t S, C, C1, C2, M[]={0,0,0}, X[]={0,0};
 uint32_t T[MAX_NDIGITS_SOS];
 //uint32_t C3[MAX_NDIGITS_SOS];
 uint32_t C3=0,C4;
 C2 = 0;
 memset(T, 0, sizeof(uint32_t)*(MAX_NDIGITS_SOS));
 //memset(C3, 0, sizeof(uint32_t)*(MAX_NDIGITS_SOS));

 if (memcmp(A,B,NDIGITS*sizeof(uint32_t))){
    for(i=0; i<NDIGITS; i++) {
       C = 0;
       for (j=0; j<NDIGITS; j++){
          //(C,S) := t[i+j] + a[j]*b[i] + C
          spMultiply(X, A[j], B[i]);   
          C1 = mpAdd(&X[0], &X[0], &C, 1);
          C = mpAdd(&S, &T[i+j], &X[0], 1);
          C +=C1;
          mpAdd(&C, &C, X+1, 1);  
          T[i+j] = S;
       } 
       T[i+NDIGITS] = C;
    }
  } else {
     // squaring bit
     for(i=0; i<NDIGITS; i++) {
       //(C,S) := t[i+i] + a[i]*a[i]
       spMultiply(X, A[i], A[i]);
       C = mpAdd(&S, &T[i+i], &X[0], 1);
       mpAdd(&C, &C, X+1, 1);  
       T[i+i] = S;
       for (j=i+1; j<NDIGITS; j++){
         //(C,S) := t[i+j] + 2*a[j]*a[i] + C
         spMultiply(X, A[j], A[i]);
         C1 = (X[0] >> 31)+C2;
         X[0] <<= 1;
         C2 = X[1] >> 31;
         X[1] = (X[1] << 1) + C1;
         C1 = mpAdd(&X[0], &X[0], &C, 1);
         C = mpAdd(&S, &T[i+j], &X[0], 1);
         C += C1;
         mpAdd(&C, &C, X+1, 1);  
         T[i+j] = S;
       } 
       T[i+NDIGITS] += C;
     }
  }

  for (i=0; i<NDIGITS;i++){
    C = 0;
    //m := t[i]*n'[0] mod W
    spMultiply(M, T[i], NPrime[pidx*NDIGITS]);
    for (j=0; j< NDIGITS; j++){
         //(C,S) := t[i+j] + m*n[j] + C
         spMultiply(X, M[0], N[pidx*NDIGITS+j]);
         C1 = mpAdd(&X[0], &X[0], &C, 1);
         C = mpAdd(&S, &T[i+j], &X[0], 1);
         C +=C1;
	 //C += C3[i+j+1];
	 //C3[i+j+1] = 0;
	 C += ((C3 >> (i+j+1)) & 1);
	 C3 &= (0xFFFFFFFF ^ (1 << (1+j+i))); 
         ////printf("2 - %x, %d\n",C3, i+j+1);
         mpAdd(&C, &C, X+1, 1);  
	 T[i+j] = S;
    }
    //ADD (t[i+s],C)
    //mpAddWithCarryProp(T, C, i+NDIGITS, MAX_NDIGITS_SOS);
    //C3[i+NDIGITS+1] = mpAdd(&T[i+NDIGITS], &T[i+NDIGITS], &C, 1);  
    C4 = mpAdd(&T[i+NDIGITS], &T[i+NDIGITS], &C, 1);
    C3 |= (C4 << (i+NDIGITS+1));  
    //printf("%x, %d\n",C3, i+NDIGITS+1);
  }
  //printNumber(&C3[NDIGITS]);
  memcpy(U,&T[NDIGITS],(NDIGITS)*sizeof(uint32_t));

 /* Step 3: if(u>=n) return u-n else return u */
 if(mpCompare(U, &N[pidx*NDIGITS], NDIGITS) >= 0) {
    mpSubtract(U, U, &N[pidx*NDIGITS], NDIGITS);
 }

}



void test_mul(void)
{
   uint32_t r[NDIGITS]; 

 int i;
 int pidx=1;
 int n_errors=0;
 uint32_t a[NDIGITS], b[NDIGITS], c[NDIGITS];

 for (i=0; i < sizeof(A_test)/(sizeof(uint32_t) * NDIGITS); i++){
     memcpy(a, &A_test[i*NDIGITS], sizeof(uint32_t) * NDIGITS);
     memcpy(b, &B_test[i*NDIGITS], sizeof(uint32_t) * NDIGITS);
     memcpy(c, &C_test[i*NDIGITS], sizeof(uint32_t) * NDIGITS);
     
     montmult_h(r, a, b, pidx);

     if (mpCompare(r,c,NDIGITS)){
        printf("Error in mult %d\n",i);
        printf("Expected\n");
        printNumber(c);
        printf("Obtained\n");
        printNumber(r);
        n_errors++;
     }
  }
  printf("N errors(Test_Mul) : %d/%d\n",n_errors, i);

}


void test_mul2(void)
{
   uint32_t r[NDIGITS]; 

   int i;
   int pidx=1;
   int n_errors=0;
   uint32_t a[NDIGITS], b[NDIGITS], c[NDIGITS];

   for (i=0; i < MAX_ITER; i++){
     setRandom(a, NDIGITS);
     setRandom(b, NDIGITS);
     a[NDIGITS-1] &= 0x7FFFFFF;
     b[NDIGITS-1] &= 0x7FFFFFF;
     
     montmult_h(r, a, b, pidx);
     montmult_h2(c, a, b, pidx);

     if (mpCompare(r,c,NDIGITS)){
        printf("Error in mult %d\n",i);
        printf("Expected\n");
        printNumber(r);
        printf("Obtained\n");
        printNumber(c);
        n_errors++;
     }
   }
   printf("N errors(Test_Mul) : %d/%d\n",n_errors, i);
}

void test_mul3(void)
{
   uint32_t r[NDIGITS]; 

   int i;
   int pidx=1;
   int n_errors=0;
   //uint32_t a[NDIGITS], b[NDIGITS], c[NDIGITS];
   uint32_t c[NDIGITS];

   uint32_t a[] = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x2FFFFFFF};
   uint32_t b[] = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x2FFFFFFF};
   for (i=0; i < MAX_ITER; i++){
     //setRandom(a, NDIGITS);
     //setRandom(b, NDIGITS);
     //a[NDIGITS-1] &= 0x7FFFFFF;
     //b[NDIGITS-1] &= 0x7FFFFFF;
     
     montmult_h(r, a, b, pidx);
     montmult_sos_h(c, a, b, pidx);

     if (mpCompare(r,c,NDIGITS)){
        printf("Error in mult %d\n",i);
        printf("Expected\n");
        printNumber(r);
        printf("Obtained\n");
        printNumber(c);
        n_errors++;
     }
   }
   printf("N errors(Test_Mul) : %d/%d\n",n_errors, i);
}

void test_mul3a(void)
{
   uint32_t r[NDIGITS*2]; 

 int i;
 int pidx=1;
 int n_errors=0;
 uint32_t a[NDIGITS], b[NDIGITS], c[2*NDIGITS];

 for (i=0; i < sizeof(A_test)/(sizeof(uint32_t) * NDIGITS); i++){
     memcpy(a, &A_test[i*NDIGITS], sizeof(uint32_t) * NDIGITS);
     memcpy(b, &B_test[i*NDIGITS], sizeof(uint32_t) * NDIGITS);
     memcpy(c, &C512_test[i*NDIGITS*2], sizeof(uint32_t) * NDIGITS*2);
     
     montmult_sos_h(r, a, b, pidx);

     if (mpCompare(r,c,NDIGITS*2)){
        printf("Error in mult %d\n",i);
        printf("Expected\n");
        printNumber(c);
        printf("Obtained\n");
        printNumber(r);
        n_errors++;
     }
  }
  printf("N errors(Test_Mul) : %d/%d\n",n_errors, i);

}

void test_mul3b(void)
{
   uint32_t r[NDIGITS*2]; 

 int i;
 int pidx=1;
 int n_errors=0;
 uint32_t a[NDIGITS], b[NDIGITS], c[2*NDIGITS];

 for (i=0; i < sizeof(A_test)/(sizeof(uint32_t) * NDIGITS); i++){
     memcpy(a, &A_test[i*NDIGITS], sizeof(uint32_t) * NDIGITS);
     memcpy(b, &B_test[i*NDIGITS], sizeof(uint32_t) * NDIGITS);
     memcpy(c, &AA_test[i*NDIGITS*2], sizeof(uint32_t) * NDIGITS*2);
     
     montmult_sos_h(r, a, a, pidx);

     if (mpCompare(r,c,NDIGITS*2)){
        printf("Error in mult %d\n",i);
        printf("Expected\n");
        printNumber(c);
        printf("Obtained\n");
        printNumber(r);
        n_errors++;
     }
  }
  printf("N errors(Test_Mul) : %d/%d\n",n_errors, i);

}

void test_mul4(void)
{
   uint32_t r[NDIGITS]; 

   int i;
   int pidx=1;
   int n_errors=0;
   uint32_t a[NDIGITS], b[NDIGITS], c[NDIGITS];

   for (i=0; i < MAX_ITER; i++){
     setRandom(a, NDIGITS);
     a[NDIGITS-1] &= 0x7FFFFFF;
     
     montmult_h(r, a, a, pidx);
     montmult_sos_h(c, a, a, pidx);

     if (mpCompare(r,c,NDIGITS)){
        printf("Error in mult %d\n",i);
        printf("Expected\n");
        printNumber(r);
        printf("Obtained\n");
        printNumber(c);
        n_errors++;
     }
   }
   printf("N errors(Test_Mul) : %d/%d\n",n_errors, i);
}

void test_mul5(void)
{
   uint32_t r[NDIGITS]; 

   int i;
   int pidx=1;
   int n_errors=0;
   uint32_t a[NDIGITS], b[NDIGITS], c[NDIGITS];

   for (i=0; i < MAX_ITER; i++){
     setRandom(a, NDIGITS);
     a[NDIGITS-1] &= 0x7FFFFFF;
     
     montmult_h(r, a, a, pidx);
     montsquare_h(c, a, pidx);

     if (mpCompare(r,c,NDIGITS)){
        printf("Error in mult %d\n",i);
        printf("Expected\n");
        printNumber(r);
        printf("Obtained\n");
        printNumber(c);
        n_errors++;
     }
   }
   printf("N errors(Test_Mul) : %d/%d\n",n_errors, i);
}



void test_findroots(void)
{
   int j;
   int pidx=1;
   int n_errors=0;
   uint32_t roots[NDIGITS*NROOTS];

   find_roots_h(roots, p_root128, NROOTS, pidx);

   for (j=0;j<sizeof(roots_128_test)/(sizeof(uint32_t)*NDIGITS); j++){
       if (mpCompare(&roots[j*NDIGITS],&roots_128_test[j*NDIGITS],NDIGITS)){
             printf("Error in root %d\n",j);
             printf("Expected\n");
             printNumber(&roots_128_test[j*NDIGITS]);
             printf("Obtained\n");
             printNumber(&roots[j*NDIGITS]);
             n_errors++;
       }
         
  }
  printf("N errors(Find_roots) : %d/%d\n",n_errors, j);

}

void test_ntt(void)
{
  int i,j;
  int pidx=1;
  int n_errors=0;
  int nroots = sizeof(roots_128_test)/(sizeof(uint32_t)*NDIGITS);
  int levels=0;
  int tmp = nroots;

  while(tmp !=0 ){
      tmp >>=1;
      levels++;
  }

  ntt_h(poly_fft_in_test, roots_128_test, levels-1, pidx);

  for (j=0;j<nroots; j++){
      if (mpCompare(&poly_fft_in_test[j*NDIGITS],&poly_fft_out_test[j*NDIGITS],NDIGITS)){
          printf("Error in poly coeff %d\n",j);
          printf("Expected\n");
          printNumber(&poly_fft_out_test[j*NDIGITS]);
          printf("Obtained\n");
          printNumber(&poly_fft_in_test[j*NDIGITS]);
          n_errors++;
       }
  }
  printf("N errors(FFT) : %d/%d\n",n_errors, j);
}

void test_ntt_parallel(void)
{
   int i,j;
   int pidx=1;
   int n_errors=0;
   int nroots = sizeof(roots_128_test)/(sizeof(uint32_t)*NDIGITS);
   int levels=0;
   int Nrows, Ncols;
   int tmp = nroots;

   while(tmp !=0 ){
      tmp >>=1;
      levels++;
   }
   levels--;

   Ncols = levels/2;
   Nrows = levels - Ncols;
   ntt_parallel_h(poly_fft_in_test, roots_128_test, Ncols, Nrows, pidx);

   for (j=0;j<nroots; j++){
       if (mpCompare(&poly_fft_in_test[j*NDIGITS],&poly_fft_out_test[j*NDIGITS],NDIGITS)){
           printf("Error in poly coeff %d\n",j);
           printf("Expected\n");
           printNumber(&poly_fft_out_test[j*NDIGITS]);
           printf("Obtained\n");
           printNumber(&poly_fft_in_test[j*NDIGITS]);
           n_errors++;
        }
    }
    printf("N errors(FFT) : %d/%d\n",n_errors, j);
}


int main()
{
  //test_mul();  // test montgomery mul with predefined results
  //test_mul2(); // test optimized impl of montgomery mul
  //test_mul3(); // test SOS impl of montgomery mul
  //test_mul4(); // test SOS impl of montgomery squaring
  test_mul5(); // test FIOS impl of montgomery squaring
  //test_findroots();
  //test_ntt();
  //test_ntt_parallel();

  return 1;
}

#endif
